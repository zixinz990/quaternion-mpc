#include "Kinematics.h"

namespace robot {
Eigen::Matrix<double, 3, 1> Kinematics::cal_left_ankle_pos_body(const Eigen::Matrix<double, LEG_DOF, 1> joint_pos) {
    Eigen::Matrix<double, 3, 1> left_ankle_pos_body;
    double b_left_ankle_pos_body_tmp;
    double b_t37_tmp;
    double left_ankle_pos_body_tmp;
    double t10;
    double t11;
    double t12;
    double t13;
    double t14;
    double t24;
    double t24_tmp;
    double t32;
    double t33;
    double t34;
    double t35;
    double t37;
    double t37_tmp;
    double t6;
    double t7;
    double t8;
    double t9;
    // CAL_LEFT_ANKLE_POS_BODY
    //     LEFT_ANKLE_POS_BODY = CAL_LEFT_ANKLE_POS_BODY(IN1)
    //     This function was generated by the Symbolic Math Toolbox version 9.2.
    //     26-Dec-2023 16:43:15
    t6 = std::cos(joint_pos[0]);
    t7 = std::cos(joint_pos[1]);
    t8 = std::cos(joint_pos[2]);
    t9 = std::cos(joint_pos[3]);
    t10 = std::sin(joint_pos[0]);
    t11 = std::sin(joint_pos[1]);
    t12 = std::sin(joint_pos[2]);
    t13 = std::sin(joint_pos[3]);
    t14 = t6 * t11;
    t32 = t12 * 0.25881867051728752 + t8 * 0.96592592665880117;
    t34 = t6 * 0.89253905378626919 + 0.073386872872531927;
    t35 = t6 * 0.1573787853566756 - 0.416197455873963;
    t37_tmp = t10 * t11;
    b_t37_tmp = t6 * t7;
    t37 = (t37_tmp * 0.1736482513311082 + t7 * 0.89253905378626919) +
          b_t37_tmp * 0.073386872872531927;
    t24_tmp = t7 * t10;
    t24 = t14 - t24_tmp * 0.42261797806762619;
    t33 = t8 * 0.25881867051728752 - t12 * 0.96592592665880117;
    t8 = (t37_tmp * 0.98480774002322313 + b_t37_tmp * 0.416197455873963) -
         t7 * 0.1573787853566756;
    left_ankle_pos_body_tmp = t33 * t34;
    b_left_ankle_pos_body_tmp = t32 * t8;
    t12 = t32 * t34;
    t8 *= t33;
    left_ankle_pos_body[0] =
        (((t6 * 0.0155012981125982 + t7 * 0.0021796961771899559) +
          (t11 * 0.00044695575041295863 - t14 * 0.0011820007746820549)) +
         (((((b_t37_tmp * -0.005764334763854388 +
              t24_tmp * 0.002796853981665954) -
             t37_tmp * 0.013639587199321641) -
            t12 * 0.01306) +
           left_ankle_pos_body_tmp * 0.24916) -
          b_left_ankle_pos_body_tmp * 0.24916)) +
        (((t8 * -0.01306 +
           t9 * (left_ankle_pos_body_tmp - b_left_ankle_pos_body_tmp) * 0.2785) -
          t13 * (t12 + t8) * 0.2785) +
         0.022768080323065449);
    left_ankle_pos_body_tmp = t10 * t33;
    b_left_ankle_pos_body_tmp = t24 * t32;
    t12 = t10 * t32;
    t8 = t24 * t33;
    left_ankle_pos_body[1] =
        (((((t10 * 0.015740430829912711 + t14 * 0.01385) - b_t37_tmp * 0.00284) -
           t24_tmp * 0.0058532589962366228) -
          t37_tmp * 0.001200235057712058) -
         t12 * 0.011836381426260719) +
        (((((left_ankle_pos_body_tmp * 0.22581568117665551 +
             b_left_ankle_pos_body_tmp * 0.24916) +
            t8 * 0.01306) +
           t9 *
               (left_ankle_pos_body_tmp * 0.90630791931552235 +
                b_left_ankle_pos_body_tmp) *
               0.2785) -
          t13 * (t12 * 0.90630791931552235 - t8) * 0.2785) +
         0.082);
    left_ankle_pos_body_tmp = t33 * t35;
    b_left_ankle_pos_body_tmp = t32 * t37;
    t12 = t32 * t35;
    t8 = t33 * t37;
    left_ankle_pos_body[2] =
        (((t6 * 0.0027332982888126061 - t7 * 0.01236166589493983) +
          (t11 * -0.0025348109127530049 - t14 * 0.0002084187189579907)) +
         ((((b_t37_tmp * -0.0010164081892845671 +
             t24_tmp * 0.00049316103378034732) -
            t37_tmp * 0.0024050282809358488) -
           t12 * 0.01306) +
          left_ankle_pos_body_tmp * 0.24916)) +
        ((((b_left_ankle_pos_body_tmp * -0.24916 - t8 * 0.01306) +
           t9 * (left_ankle_pos_body_tmp - b_left_ankle_pos_body_tmp) * 0.2785) -
          t13 * (t12 + t8) * 0.2785) -
         0.28290810159992358);
    return left_ankle_pos_body;
}

Eigen::Matrix<double, 3, 1> Kinematics::cal_right_ankle_pos_body(const Eigen::Matrix<double, LEG_DOF, 1> joint_pos) {
    Eigen::Matrix<double, 3, 1> right_ankle_pos_body;
    double b_right_ankle_pos_body_tmp;
    double b_t37_tmp;
    double right_ankle_pos_body_tmp;
    double t10;
    double t11;
    double t12;
    double t13;
    double t14;
    double t24;
    double t24_tmp;
    double t32;
    double t33;
    double t34;
    double t35;
    double t37;
    double t37_tmp;
    double t6;
    double t7;
    double t8;
    double t9;
    // CAL_RIGHT_ANKLE_POS_BODY
    //     RIGHT_ANKLE_POS_BODY = CAL_RIGHT_ANKLE_POS_BODY(IN1)
    //     This function was generated by the Symbolic Math Toolbox version 9.2.
    //     26-Dec-2023 16:43:16
    t6 = std::cos(joint_pos[0]);
    t7 = std::cos(joint_pos[1]);
    t8 = std::cos(joint_pos[2]);
    t9 = std::cos(joint_pos[3]);
    t10 = std::sin(joint_pos[0]);
    t11 = std::sin(joint_pos[1]);
    t12 = std::sin(joint_pos[2]);
    t13 = std::sin(joint_pos[3]);
    t14 = t6 * t11;
    t32 = t12 * 0.25881867051728752 + t8 * 0.96592592665880117;
    t34 = t6 * 0.89253905378626919 + 0.073386872872531927;
    t35 = t6 * 0.1573787853566756 - 0.416197455873963;
    t37_tmp = t10 * t11;
    b_t37_tmp = t6 * t7;
    t37 = (t37_tmp * 0.1736482513311082 + t7 * 0.89253905378626919) +
          b_t37_tmp * 0.073386872872531927;
    t24_tmp = t7 * t10;
    t24 = t14 - t24_tmp * 0.42261797806762619;
    t33 = t8 * 0.25881867051728752 - t12 * 0.96592592665880117;
    t8 = (t37_tmp * 0.98480774002322313 + b_t37_tmp * 0.416197455873963) -
         t7 * 0.1573787853566756;
    right_ankle_pos_body_tmp = t33 * t34;
    b_right_ankle_pos_body_tmp = t32 * t8;
    t12 = t32 * t34;
    t8 *= t33;
    right_ankle_pos_body[0] =
        (((t6 * 0.0155012981125982 + t7 * 0.0021796961771899559) +
          (t11 * -0.00044695575041295863 + t14 * 0.0011820007746820549)) +
         (((((b_t37_tmp * -0.005764334763854388 -
              t24_tmp * 0.002796853981665954) -
             t37_tmp * 0.013639587199321641) -
            t12 * 0.01306) +
           right_ankle_pos_body_tmp * 0.24916) -
          b_right_ankle_pos_body_tmp * 0.24916)) +
        (((t8 * -0.01306 +
           t9 * (right_ankle_pos_body_tmp - b_right_ankle_pos_body_tmp) *
               0.2785) -
          t13 * (t12 + t8) * 0.2785) +
         0.022768080323065449);
    right_ankle_pos_body_tmp = t10 * t33;
    b_right_ankle_pos_body_tmp = t24 * t32;
    t12 = t10 * t32;
    t8 = t24 * t33;
    right_ankle_pos_body[1] =
        (((((t10 * 0.015740430829912711 + t14 * 0.01385) + b_t37_tmp * 0.00284) -
           t24_tmp * 0.0058532589962366228) +
          t37_tmp * 0.001200235057712058) -
         t12 * 0.011836381426260719) +
        (((((right_ankle_pos_body_tmp * 0.22581568117665551 +
             b_right_ankle_pos_body_tmp * 0.24916) +
            t8 * 0.01306) +
           t9 *
               (right_ankle_pos_body_tmp * 0.90630791931552235 +
                b_right_ankle_pos_body_tmp) *
               0.2785) -
          t13 * (t12 * 0.90630791931552235 - t8) * 0.2785) -
         0.082);
    right_ankle_pos_body_tmp = t33 * t35;
    b_right_ankle_pos_body_tmp = t32 * t37;
    t12 = t32 * t35;
    t8 = t33 * t37;
    right_ankle_pos_body[2] =
        (((t6 * 0.0027332982888126061 - t7 * 0.01236166589493983) +
          (t11 * 0.0025348109127530049 + t14 * 0.0002084187189579907)) +
         ((((b_t37_tmp * -0.0010164081892845671 -
             t24_tmp * 0.00049316103378034732) -
            t37_tmp * 0.0024050282809358488) -
           t12 * 0.01306) +
          right_ankle_pos_body_tmp * 0.24916)) +
        ((((b_right_ankle_pos_body_tmp * -0.24916 - t8 * 0.01306) +
           t9 * (right_ankle_pos_body_tmp - b_right_ankle_pos_body_tmp) *
               0.2785) -
          t13 * (t12 + t8) * 0.2785) -
         0.28290810159992358);
    return right_ankle_pos_body;
}

Eigen::Matrix<double, 3, 1> Kinematics::cal_left_toe_pos_body(const Eigen::Matrix<double, LEG_DOF, 1> joint_pos) {
    Eigen::Matrix<double, 3, 1> left_toe_pos_body;
    double b_t45_tmp;
    double t10;
    double t11;
    double t12;
    double t13;
    double t14;
    double t15;
    double t16;
    double t17;
    double t27;
    double t27_tmp;
    double t28;
    double t30;
    double t35;
    double t37_tmp;
    double t40;
    double t41;
    double t45;
    double t45_tmp;
    double t46;
    double t47;
    double t48;
    double t49;
    double t52;
    double t57;
    double t58;
    double t59;
    double t61;
    double t67;
    double t69;
    double t7;
    double t73;
    double t74;
    double t77;
    double t77_tmp;
    double t8;
    double t9;
    // CAL_LEFT_TOE_POS_BODY
    //     LEFT_TOE_POS_BODY = CAL_LEFT_TOE_POS_BODY(IN1)
    //     This function was generated by the Symbolic Math Toolbox version 9.2.
    //     26-Dec-2023 16:46:07
    t7 = std::cos(joint_pos[0]);
    t8 = std::cos(joint_pos[1]);
    t9 = std::cos(joint_pos[2]);
    t10 = std::cos(joint_pos[3]);
    t11 = std::cos(joint_pos[4]);
    t12 = std::sin(joint_pos[0]);
    t13 = std::sin(joint_pos[1]);
    t14 = std::sin(joint_pos[2]);
    t15 = std::sin(joint_pos[3]);
    t16 = std::sin(joint_pos[4]);
    t17 = t7 * t13;
    t28 = t7 * 0.89253905378626919;
    t30 = t7 * 0.1573787853566756;
    t35 = t14 * 0.25881867051728752 + t9 * 0.96592592665880117;
    t45_tmp = t12 * t13;
    b_t45_tmp = t7 * t8;
    t45 = (t45_tmp * 0.1736482513311082 + t8 * 0.89253905378626919) +
          b_t45_tmp * 0.073386872872531927;
    t27_tmp = t8 * t12;
    t27 = t17 - t27_tmp * 0.42261797806762619;
    t14 = t9 * 0.25881867051728752 - t14 * 0.96592592665880117;
    t37_tmp = t12 * t35;
    t9 = (t45_tmp * 0.98480774002322313 + b_t45_tmp * 0.416197455873963) -
         t8 * 0.1573787853566756;
    t46 = t35 * (t28 + 0.073386872872531927);
    t48 = t35 * (t30 - 0.416197455873963);
    t59 = t35 * t45;
    t40 = t27 * t35;
    t41 = t27 * t14;
    t47 = t14 * (t28 + 0.073386872872531927);
    t49 = t14 * (t30 - 0.416197455873963);
    t57 = t35 * t9;
    t58 = t14 * t9;
    t61 = t14 * t45;
    t35 = t12 * t14;
    t45 = t35 * 0.90630791931552235 + t40;
    t27 = t46 + t58;
    t9 = t48 + t61;
    t14 = t49 - t59;
    t52 = t10 * t45;
    t28 = t47 - t57;
    t67 = t15 * t27;
    t73 = t15 * t9;
    t74 = t10 * t14;
    t69 = t10 * t28;
    t77_tmp = t37_tmp * 0.90630791931552235 - t41;
    t77 = t52 + -t15 * t77_tmp;
    t30 = t10 * t9 + t15 * t14;
    t9 = t10 * t27 + t15 * t28;
    t14 = t67 - t69;
    left_toe_pos_body[0] =
        (((t7 * 0.0155012981125982 + t8 * 0.0021796961771899559) +
          (((((t13 * 0.00044695575041295863 - t17 * 0.0011820007746820549) -
              t46 * 0.01306) +
             t47 * 0.24916) -
            t57 * 0.24916) -
           t58 * 0.01306)) +
         ((((((t67 * -0.2785 + t69 * 0.2785) - b_t45_tmp * 0.005764334763854388) +
             t27_tmp * 0.002796853981665954) -
            t45_tmp * 0.013639587199321641) +
           t11 * t9 / 16.0) -
          t16 * t9 / 25.0)) +
        ((t11 * t14 * -0.04 - t16 * t14 / 16.0) + 0.025053080323065451);
    t14 = t15 * t45 + t10 * t77_tmp;
    left_toe_pos_body[1] =
        ((((((((t12 * 0.015740430829912711 + t17 * 0.01385) + t40 * 0.24916) +
              t41 * 0.01306) +
             t52 * 0.2785) +
            t11 * t14 / 16.0) -
           t16 * t14 / 25.0) -
          b_t45_tmp * 0.00284) -
         t27_tmp * 0.0058532589962366228) +
        ((((((t45_tmp * -0.001200235057712058 - t37_tmp * 0.011836381426260719) +
             t35 * 0.22581568117665551) +
            t11 * t77 / 25.0) +
           t16 * t77 / 16.0) -
          t15 * t77_tmp * 0.2785) +
         0.082);
    t14 = t73 - t74;
    left_toe_pos_body[2] =
        (((t7 * 0.0027332982888126061 - t8 * 0.01236166589493983) +
          (((((t13 * -0.0025348109127530049 - t17 * 0.0002084187189579907) -
              t48 * 0.01306) +
             t49 * 0.24916) -
            t59 * 0.24916) -
           t61 * 0.01306)) +
         (((((t73 * -0.2785 + t74 * 0.2785) - b_t45_tmp * 0.0010164081892845671) +
            t27_tmp * 0.00049316103378034732) -
           t45_tmp * 0.0024050282809358488) +
          t11 * t30 / 16.0)) +
        (((t16 * t30 * -0.04 - t11 * t14 / 25.0) - t16 * t14 / 16.0) -
         0.22235210159992361);
    return left_toe_pos_body;
}

Eigen::Matrix<double, 3, 1> Kinematics::cal_left_heel_pos_body(const Eigen::Matrix<double, LEG_DOF, 1> joint_pos) {
    Eigen::Matrix<double, 3, 1> left_heel_pos_body;
    double b_t45_tmp;
    double t10;
    double t11;
    double t12;
    double t13;
    double t14;
    double t15;
    double t16;
    double t17;
    double t27;
    double t27_tmp;
    double t28;
    double t30;
    double t35;
    double t37_tmp;
    double t40;
    double t41;
    double t45;
    double t45_tmp;
    double t46;
    double t47;
    double t48;
    double t49;
    double t52;
    double t57;
    double t58;
    double t59;
    double t61;
    double t67;
    double t69;
    double t7;
    double t73;
    double t74;
    double t77;
    double t77_tmp;
    double t8;
    double t9;
    // CAL_LEFT_HEEL_POS_BODY
    //     LEFT_HEEL_POS_BODY = CAL_LEFT_HEEL_POS_BODY(IN1)
    //     This function was generated by the Symbolic Math Toolbox version 9.2.
    //     26-Dec-2023 16:46:07
    t7 = std::cos(joint_pos[0]);
    t8 = std::cos(joint_pos[1]);
    t9 = std::cos(joint_pos[2]);
    t10 = std::cos(joint_pos[3]);
    t11 = std::cos(joint_pos[4]);
    t12 = std::sin(joint_pos[0]);
    t13 = std::sin(joint_pos[1]);
    t14 = std::sin(joint_pos[2]);
    t15 = std::sin(joint_pos[3]);
    t16 = std::sin(joint_pos[4]);
    t17 = t7 * t13;
    t28 = t7 * 0.89253905378626919;
    t30 = t7 * 0.1573787853566756;
    t35 = t14 * 0.25881867051728752 + t9 * 0.96592592665880117;
    t45_tmp = t12 * t13;
    b_t45_tmp = t7 * t8;
    t45 = (t45_tmp * 0.1736482513311082 + t8 * 0.89253905378626919) +
          b_t45_tmp * 0.073386872872531927;
    t27_tmp = t8 * t12;
    t27 = t17 - t27_tmp * 0.42261797806762619;
    t14 = t9 * 0.25881867051728752 - t14 * 0.96592592665880117;
    t37_tmp = t12 * t35;
    t9 = (t45_tmp * 0.98480774002322313 + b_t45_tmp * 0.416197455873963) -
         t8 * 0.1573787853566756;
    t46 = t35 * (t28 + 0.073386872872531927);
    t48 = t35 * (t30 - 0.416197455873963);
    t59 = t35 * t45;
    t40 = t27 * t35;
    t41 = t27 * t14;
    t47 = t14 * (t28 + 0.073386872872531927);
    t49 = t14 * (t30 - 0.416197455873963);
    t57 = t35 * t9;
    t58 = t14 * t9;
    t61 = t14 * t45;
    t35 = t12 * t14;
    t45 = t35 * 0.90630791931552235 + t40;
    t27 = t46 + t58;
    t9 = t48 + t61;
    t14 = t49 - t59;
    t52 = t10 * t45;
    t28 = t47 - t57;
    t67 = t15 * t27;
    t73 = t15 * t9;
    t74 = t10 * t14;
    t69 = t10 * t28;
    t77_tmp = t37_tmp * 0.90630791931552235 - t41;
    t77 = t52 + -t15 * t77_tmp;
    t30 = t10 * t9 + t15 * t14;
    t9 = t10 * t27 + t15 * t28;
    t14 = t67 - t69;
    left_heel_pos_body[0] =
        (((t7 * 0.0155012981125982 + t8 * 0.0021796961771899559) +
          (((((t13 * 0.00044695575041295863 - t17 * 0.0011820007746820549) -
              t46 * 0.01306) +
             t47 * 0.24916) -
            t57 * 0.24916) -
           t58 * 0.01306)) +
         ((((((t67 * -0.2785 + t69 * 0.2785) - b_t45_tmp * 0.005764334763854388) +
             t27_tmp * 0.002796853981665954) -
            t45_tmp * 0.013639587199321641) -
           t11 * t9 * 0.0225) -
          t16 * t9 / 25.0)) +
        ((t11 * t14 * -0.04 + t16 * t14 * 0.0225) + 0.025053080323065451);
    t14 = t15 * t45 + t10 * t77_tmp;
    left_heel_pos_body[1] =
        ((((((((t12 * 0.015740430829912711 + t17 * 0.01385) + t40 * 0.24916) +
              t41 * 0.01306) +
             t52 * 0.2785) -
            t11 * t14 * 0.0225) -
           t16 * t14 / 25.0) -
          b_t45_tmp * 0.00284) -
         t27_tmp * 0.0058532589962366228) +
        ((((((t45_tmp * -0.001200235057712058 - t37_tmp * 0.011836381426260719) +
             t35 * 0.22581568117665551) +
            t11 * t77 / 25.0) -
           t16 * t77 * 0.0225) -
          t15 * t77_tmp * 0.2785) +
         0.082);
    t14 = t73 - t74;
    left_heel_pos_body[2] =
        (((t7 * 0.0027332982888126061 - t8 * 0.01236166589493983) +
          (((((t13 * -0.0025348109127530049 - t17 * 0.0002084187189579907) -
              t48 * 0.01306) +
             t49 * 0.24916) -
            t59 * 0.24916) -
           t61 * 0.01306)) +
         (((((t73 * -0.2785 + t74 * 0.2785) - b_t45_tmp * 0.0010164081892845671) +
            t27_tmp * 0.00049316103378034732) -
           t45_tmp * 0.0024050282809358488) -
          t11 * t30 * 0.0225)) +
        (((t16 * t30 * -0.04 - t11 * t14 / 25.0) + t16 * t14 * 0.0225) -
         0.22235210159992361);
    return left_heel_pos_body;
}

Eigen::Matrix<double, 3, 1> Kinematics::cal_right_toe_pos_body(const Eigen::Matrix<double, LEG_DOF, 1> joint_pos) {
    Eigen::Matrix<double, 3, 1> right_toe_pos_body;
    double b_t45_tmp;
    double t10;
    double t11;
    double t12;
    double t13;
    double t14;
    double t15;
    double t16;
    double t17;
    double t27;
    double t27_tmp;
    double t28;
    double t30;
    double t35;
    double t37_tmp;
    double t40;
    double t41;
    double t45;
    double t45_tmp;
    double t46;
    double t47;
    double t48;
    double t49;
    double t52;
    double t57;
    double t58;
    double t59;
    double t61;
    double t67;
    double t69;
    double t7;
    double t73;
    double t74;
    double t77;
    double t77_tmp;
    double t8;
    double t9;
    // CAL_RIGHT_TOE_POS_BODY
    //     RIGHT_TOE_POS_BODY = CAL_RIGHT_TOE_POS_BODY(IN1)
    //     This function was generated by the Symbolic Math Toolbox version 9.2.
    //     26-Dec-2023 16:46:08
    t7 = std::cos(joint_pos[0]);
    t8 = std::cos(joint_pos[1]);
    t9 = std::cos(joint_pos[2]);
    t10 = std::cos(joint_pos[3]);
    t11 = std::cos(joint_pos[4]);
    t12 = std::sin(joint_pos[0]);
    t13 = std::sin(joint_pos[1]);
    t14 = std::sin(joint_pos[2]);
    t15 = std::sin(joint_pos[3]);
    t16 = std::sin(joint_pos[4]);
    t17 = t7 * t13;
    t28 = t7 * 0.89253905378626919;
    t30 = t7 * 0.1573787853566756;
    t35 = t14 * 0.25881867051728752 + t9 * 0.96592592665880117;
    t45_tmp = t12 * t13;
    b_t45_tmp = t7 * t8;
    t45 = (t45_tmp * 0.1736482513311082 + t8 * 0.89253905378626919) +
          b_t45_tmp * 0.073386872872531927;
    t27_tmp = t8 * t12;
    t27 = t17 - t27_tmp * 0.42261797806762619;
    t14 = t9 * 0.25881867051728752 - t14 * 0.96592592665880117;
    t37_tmp = t12 * t35;
    t9 = (t45_tmp * 0.98480774002322313 + b_t45_tmp * 0.416197455873963) -
         t8 * 0.1573787853566756;
    t46 = t35 * (t28 + 0.073386872872531927);
    t48 = t35 * (t30 - 0.416197455873963);
    t59 = t35 * t45;
    t40 = t27 * t35;
    t41 = t27 * t14;
    t47 = t14 * (t28 + 0.073386872872531927);
    t49 = t14 * (t30 - 0.416197455873963);
    t57 = t35 * t9;
    t58 = t14 * t9;
    t61 = t14 * t45;
    t35 = t12 * t14;
    t45 = t35 * 0.90630791931552235 + t40;
    t27 = t46 + t58;
    t9 = t48 + t61;
    t14 = t49 - t59;
    t52 = t10 * t45;
    t28 = t47 - t57;
    t67 = t15 * t27;
    t73 = t15 * t9;
    t74 = t10 * t14;
    t69 = t10 * t28;
    t77_tmp = t37_tmp * 0.90630791931552235 - t41;
    t77 = t52 + -t15 * t77_tmp;
    t30 = t10 * t9 + t15 * t14;
    t9 = t10 * t27 + t15 * t28;
    t14 = t67 - t69;
    right_toe_pos_body[0] =
        (((t7 * 0.0155012981125982 + t8 * 0.0021796961771899559) +
          (((((t13 * -0.00044695575041295863 + t17 * 0.0011820007746820549) -
              t46 * 0.01306) +
             t47 * 0.24916) -
            t57 * 0.24916) -
           t58 * 0.01306)) +
         ((((((t67 * -0.2785 + t69 * 0.2785) - b_t45_tmp * 0.005764334763854388) -
             t27_tmp * 0.002796853981665954) -
            t45_tmp * 0.013639587199321641) +
           t11 * t9 / 16.0) -
          t16 * t9 / 25.0)) +
        ((t11 * t14 * -0.04 - t16 * t14 / 16.0) + 0.025053080323065451);
    t14 = t15 * t45 + t10 * t77_tmp;
    right_toe_pos_body[1] =
        ((((((((t12 * 0.015740430829912711 + t17 * 0.01385) + t40 * 0.24916) +
              t41 * 0.01306) +
             t52 * 0.2785) +
            t11 * t14 / 16.0) -
           t16 * t14 / 25.0) +
          b_t45_tmp * 0.00284) -
         t27_tmp * 0.0058532589962366228) +
        ((((((t45_tmp * 0.001200235057712058 - t37_tmp * 0.011836381426260719) +
             t35 * 0.22581568117665551) +
            t11 * t77 / 25.0) +
           t16 * t77 / 16.0) -
          t15 * t77_tmp * 0.2785) -
         0.082);
    t14 = t73 - t74;
    right_toe_pos_body[2] =
        (((t7 * 0.0027332982888126061 - t8 * 0.01236166589493983) +
          (((((t13 * 0.0025348109127530049 + t17 * 0.0002084187189579907) -
              t48 * 0.01306) +
             t49 * 0.24916) -
            t59 * 0.24916) -
           t61 * 0.01306)) +
         (((((t73 * -0.2785 + t74 * 0.2785) - b_t45_tmp * 0.0010164081892845671) -
            t27_tmp * 0.00049316103378034732) -
           t45_tmp * 0.0024050282809358488) +
          t11 * t30 / 16.0)) +
        (((t16 * t30 * -0.04 - t11 * t14 / 25.0) - t16 * t14 / 16.0) -
         0.22235210159992361);
    return right_toe_pos_body;
}

Eigen::Matrix<double, 3, 1> Kinematics::cal_right_heel_pos_body(const Eigen::Matrix<double, LEG_DOF, 1> joint_pos) {
    Eigen::Matrix<double, 3, 1> right_heel_pos_body;
    double b_t45_tmp;
    double t10;
    double t11;
    double t12;
    double t13;
    double t14;
    double t15;
    double t16;
    double t17;
    double t27;
    double t27_tmp;
    double t28;
    double t30;
    double t35;
    double t37_tmp;
    double t40;
    double t41;
    double t45;
    double t45_tmp;
    double t46;
    double t47;
    double t48;
    double t49;
    double t52;
    double t57;
    double t58;
    double t59;
    double t61;
    double t67;
    double t69;
    double t7;
    double t73;
    double t74;
    double t77;
    double t77_tmp;
    double t8;
    double t9;
    // CAL_RIGHT_HEEL_POS_BODY
    //     RIGHT_HEEL_POS_BODY = CAL_RIGHT_HEEL_POS_BODY(IN1)
    //     This function was generated by the Symbolic Math Toolbox version 9.2.
    //     26-Dec-2023 16:46:10
    t7 = std::cos(joint_pos[0]);
    t8 = std::cos(joint_pos[1]);
    t9 = std::cos(joint_pos[2]);
    t10 = std::cos(joint_pos[3]);
    t11 = std::cos(joint_pos[4]);
    t12 = std::sin(joint_pos[0]);
    t13 = std::sin(joint_pos[1]);
    t14 = std::sin(joint_pos[2]);
    t15 = std::sin(joint_pos[3]);
    t16 = std::sin(joint_pos[4]);
    t17 = t7 * t13;
    t28 = t7 * 0.89253905378626919;
    t30 = t7 * 0.1573787853566756;
    t35 = t14 * 0.25881867051728752 + t9 * 0.96592592665880117;
    t45_tmp = t12 * t13;
    b_t45_tmp = t7 * t8;
    t45 = (t45_tmp * 0.1736482513311082 + t8 * 0.89253905378626919) +
          b_t45_tmp * 0.073386872872531927;
    t27_tmp = t8 * t12;
    t27 = t17 - t27_tmp * 0.42261797806762619;
    t14 = t9 * 0.25881867051728752 - t14 * 0.96592592665880117;
    t37_tmp = t12 * t35;
    t9 = (t45_tmp * 0.98480774002322313 + b_t45_tmp * 0.416197455873963) -
         t8 * 0.1573787853566756;
    t46 = t35 * (t28 + 0.073386872872531927);
    t48 = t35 * (t30 - 0.416197455873963);
    t59 = t35 * t45;
    t40 = t27 * t35;
    t41 = t27 * t14;
    t47 = t14 * (t28 + 0.073386872872531927);
    t49 = t14 * (t30 - 0.416197455873963);
    t57 = t35 * t9;
    t58 = t14 * t9;
    t61 = t14 * t45;
    t35 = t12 * t14;
    t45 = t35 * 0.90630791931552235 + t40;
    t27 = t46 + t58;
    t9 = t48 + t61;
    t14 = t49 - t59;
    t52 = t10 * t45;
    t28 = t47 - t57;
    t67 = t15 * t27;
    t73 = t15 * t9;
    t74 = t10 * t14;
    t69 = t10 * t28;
    t77_tmp = t37_tmp * 0.90630791931552235 - t41;
    t77 = t52 + -t15 * t77_tmp;
    t30 = t10 * t9 + t15 * t14;
    t9 = t10 * t27 + t15 * t28;
    t14 = t67 - t69;
    right_heel_pos_body[0] =
        (((t7 * 0.0155012981125982 + t8 * 0.0021796961771899559) +
          (((((t13 * -0.00044695575041295863 + t17 * 0.0011820007746820549) -
              t46 * 0.01306) +
             t47 * 0.24916) -
            t57 * 0.24916) -
           t58 * 0.01306)) +
         ((((((t67 * -0.2785 + t69 * 0.2785) - b_t45_tmp * 0.005764334763854388) -
             t27_tmp * 0.002796853981665954) -
            t45_tmp * 0.013639587199321641) -
           t11 * t9 * 0.0225) -
          t16 * t9 / 25.0)) +
        ((t11 * t14 * -0.04 + t16 * t14 * 0.0225) + 0.025053080323065451);
    t14 = t15 * t45 + t10 * t77_tmp;
    right_heel_pos_body[1] =
        ((((((((t12 * 0.015740430829912711 + t17 * 0.01385) + t40 * 0.24916) +
              t41 * 0.01306) +
             t52 * 0.2785) -
            t11 * t14 * 0.0225) -
           t16 * t14 / 25.0) +
          b_t45_tmp * 0.00284) -
         t27_tmp * 0.0058532589962366228) +
        ((((((t45_tmp * 0.001200235057712058 - t37_tmp * 0.011836381426260719) +
             t35 * 0.22581568117665551) +
            t11 * t77 / 25.0) -
           t16 * t77 * 0.0225) -
          t15 * t77_tmp * 0.2785) -
         0.082);
    t14 = t73 - t74;
    right_heel_pos_body[2] =
        (((t7 * 0.0027332982888126061 - t8 * 0.01236166589493983) +
          (((((t13 * 0.0025348109127530049 + t17 * 0.0002084187189579907) -
              t48 * 0.01306) +
             t49 * 0.24916) -
            t59 * 0.24916) -
           t61 * 0.01306)) +
         (((((t73 * -0.2785 + t74 * 0.2785) - b_t45_tmp * 0.0010164081892845671) -
            t27_tmp * 0.00049316103378034732) -
           t45_tmp * 0.0024050282809358488) -
          t11 * t30 * 0.0225)) +
        (((t16 * t30 * -0.04 - t11 * t14 / 25.0) + t16 * t14 * 0.0225) -
         0.22235210159992361);
    return right_heel_pos_body;
}

Eigen::Matrix<double, 3, LEG_DOF> Kinematics::cal_left_ankle_jac(const Eigen::Matrix<double, LEG_DOF, 1> joint_pos) {
    Eigen::Matrix<double, 3, LEG_DOF> left_ankle_jac;
    double left_ankle_jac_body[15];
    double t10;
    double t10_tmp;
    double t11;
    double t12;
    double t13;
    double t14;
    double t15;
    double t16;
    double t33;
    double t34;
    double t35;
    double t35_tmp;
    double t36;
    double t39;
    double t52;
    double t53;
    double t54;
    double t58;
    double t59;
    double t6;
    double t60;
    double t64;
    double t66;
    double t67;
    double t68;
    double t69;
    double t7;
    double t70;
    double t73;
    double t73_tmp;
    double t74;
    double t76;
    double t77;
    double t78;
    double t8;
    double t86;
    double t88;
    double t89;
    double t9;
    double t92;
    // CAL_LEFT_ANKLE_JAC_BODY
    //     LEFT_ANKLE_JAC_BODY = CAL_LEFT_ANKLE_JAC_BODY(IN1)
    //     This function was generated by the Symbolic Math Toolbox version 9.2.
    //     26-Dec-2023 16:43:16
    t6 = std::cos(joint_pos[0]);
    t7 = std::cos(joint_pos[1]);
    t8 = std::cos(joint_pos[2]);
    t9 = std::cos(joint_pos[3]);
    t10 = std::sin(joint_pos[0]);
    t11 = std::sin(joint_pos[1]);
    t12 = std::sin(joint_pos[2]);
    t13 = std::sin(joint_pos[3]);
    t14 = t6 * t7;
    t15 = t6 * t11;
    t16 = t10 * t11;
    t36 = t6 * 0.89253905378626919;
    t39 = t6 * 0.1573787853566756;
    t52 = t12 * 0.25881867051728752 + t8 * 0.96592592665880117;
    t33 = t14 + t16 * 0.42261797806762619;
    t34 = t16 + t14 * 0.42261797806762619;
    t35_tmp = t7 * t10;
    t35 = t15 - t35_tmp * 0.42261797806762619;
    t53 = t8 * 0.25881867051728752 - t12 * 0.96592592665880117;
    t54 = t15 * 0.98480774002322313 - t35_tmp * 0.416197455873963;
    t58 = t15 * 0.1736482513311082 - t35_tmp * 0.073386872872531927;
    t8 = (t16 * 0.98480774002322313 + t14 * 0.416197455873963) -
         t7 * 0.1573787853566756;
    t12 = (t16 * 0.1736482513311082 + t7 * 0.89253905378626919) +
          t14 * 0.073386872872531927;
    t66 = (-(t35_tmp * 0.1736482513311082) + t11 * 0.89253905378626919) +
          t15 * 0.073386872872531927;
    t67 = t52 * (t36 + 0.073386872872531927);
    t69 = t52 * (t39 - 0.416197455873963);
    t59 = t35 * t52;
    t60 = t35 * t53;
    t64 = (t35_tmp * 0.98480774002322313 + t11 * 0.1573787853566756) -
          t15 * 0.416197455873963;
    t68 = t53 * (t36 + 0.073386872872531927);
    t70 = t53 * (t39 - 0.416197455873963);
    t76 = t52 * t8;
    t77 = t53 * t8;
    t78 = t52 * t12;
    t36 = t53 * t12;
    t39 = t10 * t52;
    t74 = t9 * (t39 * 0.90630791931552235 - t60) * -0.2785;
    t73_tmp = t10 * t53;
    t73 = t13 * (t73_tmp * 0.90630791931552235 + t59) * 0.2785;
    t86 = t9 * (t67 + t77) * 0.2785;
    t89 = t9 * (t69 + t36) * 0.2785;
    t88 = t13 * (t68 - t76) * 0.2785;
    t92 = t13 * (t70 - t78) * 0.2785;
    t10_tmp = t52 * t54;
    t12 = t53 * t54;
    left_ankle_jac_body[0] =
        ((((t10 * -0.0155012981125982 + t14 * 0.002796853981665954) -
           t15 * 0.013639587199321641) +
          (t16 * 0.0011820007746820549 + t35_tmp * 0.005764334763854388)) +
         (((t39 * 0.01165656004244868 - t73_tmp * 0.22238503064138679) -
           t10_tmp * 0.24916) -
          t12 * 0.01306)) +
        (t9 * (t73_tmp * 0.89253905378626919 + t10_tmp) * -0.2785 +
         t13 * (t39 * 0.89253905378626919 - t12) * 0.2785);
    t10_tmp = t6 * t53;
    t12 = t34 * t52;
    t35 = t6 * t52;
    t8 = t34 * t53;
    left_ankle_jac_body[1] =
        (((((t6 * 0.015740430829912711 - t14 * 0.0058532589962366228) -
            t15 * 0.001200235057712058) -
           t16 * 0.01385) +
          t35_tmp * 0.00284) -
         t35 * 0.011836381426260719) +
        ((((t10_tmp * 0.22581568117665551 - t12 * 0.24916) - t8 * 0.01306) +
          t9 * (t10_tmp * 0.90630791931552235 - t12) * 0.2785) -
         t13 * (t35 * 0.90630791931552235 + t8) * 0.2785);
    t10_tmp = t52 * t58;
    t12 = t53 * t58;
    left_ankle_jac_body[2] =
        ((((t10 * -0.0027332982888126061 + t14 * 0.00049316103378034732) -
           t15 * 0.0024050282809358488) +
          (t16 * 0.0002084187189579907 + t35_tmp * 0.0010164081892845671)) +
         (((t39 * 0.0020553669367581831 - t73_tmp * 0.039212498159469283) -
           t10_tmp * 0.24916) -
          t12 * 0.01306)) +
        (t9 * (t73_tmp * 0.1573787853566756 + t10_tmp) * -0.2785 +
         t13 * (t39 * 0.1573787853566756 - t12) * 0.2785);
    t10_tmp = t9 * t52;
    t12 = t13 * t53;
    left_ankle_jac_body[3] =
        ((t7 * 0.00044695575041295863 - t11 * 0.0021796961771899559) +
         ((t14 * -0.0011820007746820549 + t15 * 0.005764334763854388) -
          t16 * 0.002796853981665954)) +
        ((((t35_tmp * -0.013639587199321641 - t52 * t64 * 0.24916) -
           t53 * t64 * 0.01306) -
          t10_tmp * t64 * 0.2785) -
         t12 * t64 * 0.2785);
    left_ankle_jac_body[4] =
        ((((((t14 * 0.01385 + t15 * 0.00284) + t16 * 0.0058532589962366228) -
            t35_tmp * 0.001200235057712058) +
           t33 * t52 * 0.24916) +
          t33 * t53 * 0.01306) +
         t9 * t33 * t52 * 0.2785) +
        t13 * t33 * t53 * 0.2785;
    left_ankle_jac_body[5] =
        ((t7 * -0.0025348109127530049 + t11 * 0.01236166589493983) +
         ((t14 * -0.0002084187189579907 + t15 * 0.0010164081892845671) -
          t16 * 0.00049316103378034732)) +
        ((((t35_tmp * -0.0024050282809358488 + t52 * t66 * 0.24916) +
           t53 * t66 * 0.01306) +
          t10_tmp * t66 * 0.2785) +
         t12 * t66 * 0.2785);
    left_ankle_jac_body[6] =
        ((((t67 * -0.24916 - t68 * 0.01306) + t76 * 0.01306) - t77 * 0.24916) -
         t86) -
        t88;
    left_ankle_jac_body[7] = ((((t59 * -0.01306 + t60 * 0.24916) + t74) - t73) -
                              t39 * 0.22581568117665551) -
                             t73_tmp * 0.011836381426260719;
    left_ankle_jac_body[8] =
        ((((t69 * -0.24916 - t70 * 0.01306) + t78 * 0.01306) - t36 * 0.24916) -
         t89) -
        t92;
    left_ankle_jac_body[9] = -t86 - t88;
    left_ankle_jac_body[10] = t74 - t73;
    left_ankle_jac_body[11] = -t89 - t92;
    left_ankle_jac_body[12] = 0.0;
    left_ankle_jac_body[13] = 0.0;
    left_ankle_jac_body[14] = 0.0;
    left_ankle_jac << left_ankle_jac_body[0], left_ankle_jac_body[3], left_ankle_jac_body[6], left_ankle_jac_body[9], left_ankle_jac_body[12],
        left_ankle_jac_body[1], left_ankle_jac_body[4], left_ankle_jac_body[7], left_ankle_jac_body[10], left_ankle_jac_body[13],
        left_ankle_jac_body[2], left_ankle_jac_body[5], left_ankle_jac_body[8], left_ankle_jac_body[11], left_ankle_jac_body[14];
    return left_ankle_jac;
}

Eigen::Matrix<double, 3, LEG_DOF> Kinematics::cal_right_ankle_jac(const Eigen::Matrix<double, LEG_DOF, 1> joint_pos) {
    Eigen::Matrix<double, 3, LEG_DOF> right_ankle_jac;
    double right_ankle_jac_body[15];
    double t10;
    double t10_tmp;
    double t11;
    double t12;
    double t13;
    double t14;
    double t15;
    double t16;
    double t33;
    double t34;
    double t35;
    double t35_tmp;
    double t36;
    double t39;
    double t52;
    double t53;
    double t54;
    double t58;
    double t59;
    double t6;
    double t60;
    double t64;
    double t66;
    double t67;
    double t68;
    double t69;
    double t7;
    double t70;
    double t73;
    double t73_tmp;
    double t74;
    double t76;
    double t77;
    double t78;
    double t8;
    double t86;
    double t88;
    double t89;
    double t9;
    double t92;
    // CAL_RIGHT_ANKLE_JAC_BODY
    //     RIGHT_ANKLE_JAC_BODY = CAL_RIGHT_ANKLE_JAC_BODY(IN1)
    //     This function was generated by the Symbolic Math Toolbox version 9.2.
    //     26-Dec-2023 16:43:16
    t6 = std::cos(joint_pos[0]);
    t7 = std::cos(joint_pos[1]);
    t8 = std::cos(joint_pos[2]);
    t9 = std::cos(joint_pos[3]);
    t10 = std::sin(joint_pos[0]);
    t11 = std::sin(joint_pos[1]);
    t12 = std::sin(joint_pos[2]);
    t13 = std::sin(joint_pos[3]);
    t14 = t6 * t7;
    t15 = t6 * t11;
    t16 = t10 * t11;
    t36 = t6 * 0.89253905378626919;
    t39 = t6 * 0.1573787853566756;
    t52 = t12 * 0.25881867051728752 + t8 * 0.96592592665880117;
    t33 = t14 + t16 * 0.42261797806762619;
    t34 = t16 + t14 * 0.42261797806762619;
    t35_tmp = t7 * t10;
    t35 = t15 - t35_tmp * 0.42261797806762619;
    t53 = t8 * 0.25881867051728752 - t12 * 0.96592592665880117;
    t54 = t15 * 0.98480774002322313 - t35_tmp * 0.416197455873963;
    t58 = t15 * 0.1736482513311082 - t35_tmp * 0.073386872872531927;
    t8 = (t16 * 0.98480774002322313 + t14 * 0.416197455873963) -
         t7 * 0.1573787853566756;
    t12 = (t16 * 0.1736482513311082 + t7 * 0.89253905378626919) +
          t14 * 0.073386872872531927;
    t66 = (-(t35_tmp * 0.1736482513311082) + t11 * 0.89253905378626919) +
          t15 * 0.073386872872531927;
    t67 = t52 * (t36 + 0.073386872872531927);
    t69 = t52 * (t39 - 0.416197455873963);
    t59 = t35 * t52;
    t60 = t35 * t53;
    t64 = (t35_tmp * 0.98480774002322313 + t11 * 0.1573787853566756) -
          t15 * 0.416197455873963;
    t68 = t53 * (t36 + 0.073386872872531927);
    t70 = t53 * (t39 - 0.416197455873963);
    t76 = t52 * t8;
    t77 = t53 * t8;
    t78 = t52 * t12;
    t36 = t53 * t12;
    t39 = t10 * t52;
    t74 = t9 * (t39 * 0.90630791931552235 - t60) * -0.2785;
    t73_tmp = t10 * t53;
    t73 = t13 * (t73_tmp * 0.90630791931552235 + t59) * 0.2785;
    t86 = t9 * (t67 + t77) * 0.2785;
    t89 = t9 * (t69 + t36) * 0.2785;
    t88 = t13 * (t68 - t76) * 0.2785;
    t92 = t13 * (t70 - t78) * 0.2785;
    t10_tmp = t52 * t54;
    t12 = t53 * t54;
    right_ankle_jac_body[0] =
        ((((t10 * -0.0155012981125982 - t14 * 0.002796853981665954) -
           t15 * 0.013639587199321641) +
          (t16 * -0.0011820007746820549 + t35_tmp * 0.005764334763854388)) +
         (((t39 * 0.01165656004244868 - t73_tmp * 0.22238503064138679) -
           t10_tmp * 0.24916) -
          t12 * 0.01306)) +
        (t9 * (t73_tmp * 0.89253905378626919 + t10_tmp) * -0.2785 +
         t13 * (t39 * 0.89253905378626919 - t12) * 0.2785);
    t10_tmp = t6 * t53;
    t12 = t34 * t52;
    t35 = t6 * t52;
    t8 = t34 * t53;
    right_ankle_jac_body[1] =
        (((((t6 * 0.015740430829912711 - t14 * 0.0058532589962366228) +
            t15 * 0.001200235057712058) -
           t16 * 0.01385) -
          t35_tmp * 0.00284) -
         t35 * 0.011836381426260719) +
        ((((t10_tmp * 0.22581568117665551 - t12 * 0.24916) - t8 * 0.01306) +
          t9 * (t10_tmp * 0.90630791931552235 - t12) * 0.2785) -
         t13 * (t35 * 0.90630791931552235 + t8) * 0.2785);
    t10_tmp = t52 * t58;
    t12 = t53 * t58;
    right_ankle_jac_body[2] =
        ((((t10 * -0.0027332982888126061 - t14 * 0.00049316103378034732) -
           t15 * 0.0024050282809358488) +
          (t16 * -0.0002084187189579907 + t35_tmp * 0.0010164081892845671)) +
         (((t39 * 0.0020553669367581831 - t73_tmp * 0.039212498159469283) -
           t10_tmp * 0.24916) -
          t12 * 0.01306)) +
        (t9 * (t73_tmp * 0.1573787853566756 + t10_tmp) * -0.2785 +
         t13 * (t39 * 0.1573787853566756 - t12) * 0.2785);
    t10_tmp = t9 * t52;
    t12 = t13 * t53;
    right_ankle_jac_body[3] =
        ((t7 * -0.00044695575041295863 - t11 * 0.0021796961771899559) +
         ((t14 * 0.0011820007746820549 + t15 * 0.005764334763854388) +
          t16 * 0.002796853981665954)) +
        ((((t35_tmp * -0.013639587199321641 - t52 * t64 * 0.24916) -
           t53 * t64 * 0.01306) -
          t10_tmp * t64 * 0.2785) -
         t12 * t64 * 0.2785);
    right_ankle_jac_body[4] =
        ((((((t14 * 0.01385 - t15 * 0.00284) + t16 * 0.0058532589962366228) +
            t35_tmp * 0.001200235057712058) +
           t33 * t52 * 0.24916) +
          t33 * t53 * 0.01306) +
         t9 * t33 * t52 * 0.2785) +
        t13 * t33 * t53 * 0.2785;
    right_ankle_jac_body[5] =
        ((t7 * 0.0025348109127530049 + t11 * 0.01236166589493983) +
         ((t14 * 0.0002084187189579907 + t15 * 0.0010164081892845671) +
          t16 * 0.00049316103378034732)) +
        ((((t35_tmp * -0.0024050282809358488 + t52 * t66 * 0.24916) +
           t53 * t66 * 0.01306) +
          t10_tmp * t66 * 0.2785) +
         t12 * t66 * 0.2785);
    right_ankle_jac_body[6] =
        ((((t67 * -0.24916 - t68 * 0.01306) + t76 * 0.01306) - t77 * 0.24916) -
         t86) -
        t88;
    right_ankle_jac_body[7] = ((((t59 * -0.01306 + t60 * 0.24916) + t74) - t73) -
                               t39 * 0.22581568117665551) -
                              t73_tmp * 0.011836381426260719;
    right_ankle_jac_body[8] =
        ((((t69 * -0.24916 - t70 * 0.01306) + t78 * 0.01306) - t36 * 0.24916) -
         t89) -
        t92;
    right_ankle_jac_body[9] = -t86 - t88;
    right_ankle_jac_body[10] = t74 - t73;
    right_ankle_jac_body[11] = -t89 - t92;
    right_ankle_jac_body[12] = 0.0;
    right_ankle_jac_body[13] = 0.0;
    right_ankle_jac_body[14] = 0.0;
    right_ankle_jac << right_ankle_jac_body[0], right_ankle_jac_body[3], right_ankle_jac_body[6], right_ankle_jac_body[9], right_ankle_jac_body[12],
        right_ankle_jac_body[1], right_ankle_jac_body[4], right_ankle_jac_body[7], right_ankle_jac_body[10], right_ankle_jac_body[13],
        right_ankle_jac_body[2], right_ankle_jac_body[5], right_ankle_jac_body[8], right_ankle_jac_body[11], right_ankle_jac_body[14];
    return right_ankle_jac;
}

Eigen::Matrix<double, 3, LEG_DOF> Kinematics::cal_left_toe_jac(const Eigen::Matrix<double, LEG_DOF, 1> joint_pos) {
    Eigen::Matrix<double, 3, LEG_DOF> left_toe_jac;
    double left_toe_jac_body[15];
    double t10;
    double t101;
    double t103;
    double t104;
    double t105;
    double t106;
    double t107;
    double t11;
    double t118;
    double t119;
    double t12;
    double t120;
    double t121;
    double t122;
    double t123;
    double t124;
    double t125;
    double t126;
    double t127;
    double t128;
    double t129_tmp;
    double t13;
    double t130_tmp;
    double t131_tmp;
    double t134;
    double t137;
    double t14;
    double t143;
    double t144;
    double t146;
    double t147;
    double t148;
    double t15;
    double t150;
    double t152;
    double t154;
    double t159;
    double t16;
    double t161;
    double t171;
    double t18;
    double t180;
    double t183;
    double t186;
    double t187;
    double t19;
    double t190;
    double t192;
    double t193;
    double t195;
    double t196;
    double t199;
    double t20;
    double t209;
    double t21;
    double t211;
    double t23;
    double t24;
    double t26;
    double t68;
    double t7;
    double t70;
    double t71;
    double t71_tmp;
    double t72;
    double t72_tmp;
    double t73;
    double t74;
    double t77;
    double t8;
    double t9;
    double t90;
    double t91;
    double t92;
    double t93;
    double t93_tmp;
    double t94;
    double t97_tmp;
    // CAL_LEFT_TOE_JAC_BODY
    //     LEFT_TOE_JAC_BODY = CAL_LEFT_TOE_JAC_BODY(IN1)
    //     This function was generated by the Symbolic Math Toolbox version 9.2.
    //     26-Dec-2023 16:46:11
    t7 = std::cos(joint_pos[0]);
    t8 = std::cos(joint_pos[1]);
    t9 = std::cos(joint_pos[2]);
    t10 = std::cos(joint_pos[3]);
    t11 = std::cos(joint_pos[4]);
    t12 = std::sin(joint_pos[0]);
    t13 = std::sin(joint_pos[1]);
    t14 = std::sin(joint_pos[2]);
    t15 = std::sin(joint_pos[3]);
    t16 = std::sin(joint_pos[4]);
    t18 = joint_pos[2] + joint_pos[3];
    t19 = std::cos(joint_pos[0] + joint_pos[1]);
    t20 = std::cos(t18);
    t21 = std::sin(t18);
    t23 = t7 * t13;
    t24 = t12 * t13;
    t74 = t7 * 0.89253905378626919;
    t77 = t7 * 0.1573787853566756;
    t26 = std::cos(joint_pos[0] - joint_pos[1]);
    t71_tmp = t7 * t8;
    t71 = t24 + t71_tmp * 0.42261797806762619;
    t90 = t14 * 0.25881867051728752 + t9 * 0.96592592665880117;
    t68 = t21 * 1.165615668098183E+15 + t20 * 4.350143643368078E+15;
    t72_tmp = t8 * t12;
    t72 = t23 - t72_tmp * 0.42261797806762619;
    t91 = t9 * 0.25881867051728752 - t14 * 0.96592592665880117;
    t119 = t9 * t15;
    t93_tmp = t10 * t14;
    t9 *= t10;
    t18 = t14 * t15;
    t93 = ((t18 * 1.165615668098183E+15 + t119 * 4.350143643368078E+15) +
           t93_tmp * 4.350143643368078E+15) -
          t9 * 1.165615668098183E+15;
    t94 = ((t119 * 1.165615668098183E+15 + t93_tmp * 1.165615668098183E+15) +
           t9 * 4.350143643368078E+15) -
          t18 * 4.350143643368078E+15;
    t18 = t23 * 0.98480774002322313 - t72_tmp * 0.416197455873963;
    t97_tmp = t12 * t90;
    t9 = t23 * 0.1736482513311082 - t72_tmp * 0.073386872872531927;
    t103 = (t13 * 5.792909656367617E+32 + t23 * 4.7630803684217777E+31) -
           t72_tmp * 1.127041587345724E+32;
    t104 = t71 * t90;
    t14 = (t24 * 0.98480774002322313 + t71_tmp * 0.416197455873963) -
          t8 * 0.1573787853566756;
    t119 = (t24 * 0.1736482513311082 + t8 * 0.89253905378626919) +
           t71_tmp * 0.073386872872531927;
    t120 = (-(t72_tmp * 0.1736482513311082) + t13 * 0.89253905378626919) +
           t23 * 0.073386872872531927;
    t125 = t90 * (t74 + 0.073386872872531927);
    t127 = t90 * (t77 - 0.416197455873963);
    t70 = t20 * 1.165615668098183E+15 - t21 * 4.350143643368078E+15;
    t73 = t19 * 1.040118983530025E+16 + t26 * 2.562760718366372E+16;
    t92 = t19 * 0.28869101096618688 + t26 * 0.71130898903381312;
    t101 = (t13 * 6.3840419750585418E+30 + t72_tmp * 3.9948547927995041E+31) -
           t23 * 1.6882974552066919E+31;
    t105 = t71 * t91;
    t106 = t72 * t90;
    t107 = t72 * t91;
    t118 = (t72_tmp * 0.98480774002322313 + t13 * 0.1573787853566756) -
           t23 * 0.416197455873963;
    t121 = t90 * t18;
    t122 = t91 * t18;
    t123 = t90 * t9;
    t124 = t91 * t9;
    t126 = t91 * (t74 + 0.073386872872531927);
    t128 = t91 * (t77 - 0.416197455873963);
    t146 = t90 * t14;
    t147 = t91 * t14;
    t148 = t90 * t119;
    t150 = t91 * t119;
    t129_tmp = t7 * t90;
    t18 = t129_tmp * 0.90630791931552235 + t105;
    t130_tmp = t12 * t91;
    t14 = t130_tmp * 0.90630791931552235 + t106;
    t131_tmp = t7 * t91;
    t9 = t131_tmp * 0.90630791931552235 - t104;
    t93_tmp = t97_tmp * 0.90630791931552235 - t107;
    t21 = t10 * t93_tmp;
    t144 = t21 * -0.2785;
    t152 = t130_tmp * 0.89253905378626919 + t121;
    t159 = t130_tmp * 0.1573787853566756 + t123;
    t119 = t125 + t147;
    t77 = t127 + t150;
    t134 = t15 * t18;
    t20 = t15 * t14;
    t137 = t10 * t9;
    t154 = t10 * t152;
    t161 = t10 * t159;
    t74 = t126 - t146;
    t26 = t10 * t119;
    t171 = t128 - t148;
    t71 = t10 * t77;
    t143 = t20 * 0.2785;
    t19 = t15 * t74;
    t72 = t15 * t171;
    t180 = t10 * t18 + t15 * t9;
    t9 = t10 * t14 + -t15 * t93_tmp;
    t183 = t26 * 0.2785;
    t187 = t71 * 0.2785;
    t18 = t20 + t21;
    t195 = t11 * t18 * -0.04;
    t196 = t16 * t18 * -0.0625;
    t93_tmp = t97_tmp * 0.89253905378626919 - t122;
    t21 = t154 + -t15 * t93_tmp;
    t20 = t97_tmp * 0.1573787853566756 - t124;
    t199 = t161 + -t15 * t20;
    t186 = t19 * 0.2785;
    t190 = t72 * 0.2785;
    t192 = t11 * t9 / 16.0;
    t193 = t16 * t9 / 25.0;
    t9 = t26 + t19;
    t14 = t71 + t72;
    t18 = t15 * t119 - t10 * t74;
    t209 = t11 * t18 * -0.0625;
    t211 = t16 * t18 / 25.0;
    t18 = t15 * t77 - t10 * t171;
    t171 = t11 * t18 * -0.0625;
    t74 = t16 * t18 / 25.0;
    t77 = t11 * t9 / 25.0;
    t72 = t16 * t9 / 16.0;
    t119 = t11 * t14 / 25.0;
    t71 = t16 * t14 / 16.0;
    t19 = t15 * t152 + t10 * t93_tmp;
    left_toe_jac_body[0] =
        ((((t12 * -0.0155012981125982 - t23 * 0.013639587199321641) +
           t24 * 0.0011820007746820549) -
          t121 * 0.24916) +
         (((((t122 * -0.01306 - t154 * 0.2785) - t11 * t19 / 16.0) +
            t16 * t19 / 25.0) +
           t71_tmp * 0.002796853981665954) +
          t72_tmp * 0.005764334763854388)) +
        ((((t97_tmp * 0.01165656004244868 - t130_tmp * 0.22238503064138679) -
           t11 * t21 / 25.0) -
          t16 * t21 / 16.0) +
         t15 * t93_tmp * 0.2785);
    t19 = t134 - t137;
    left_toe_jac_body[1] =
        (((((((t7 * 0.015740430829912711 - t23 * 0.001200235057712058) -
              t24 * 0.01385) -
             t104 * 0.24916) -
            t105 * 0.01306) -
           t134 * 0.2785) +
          t137 * 0.2785) -
         t71_tmp * 0.0058532589962366228) +
        ((((((t72_tmp * 0.00284 - t129_tmp * 0.011836381426260719) +
             t131_tmp * 0.22581568117665551) +
            t11 * t180 / 16.0) -
           t16 * t180 / 25.0) -
          t11 * t19 / 25.0) -
         t16 * t19 / 16.0);
    t19 = t15 * t159 + t10 * t20;
    left_toe_jac_body[2] =
        (((t12 * -0.0027332982888126061 - t23 * 0.0024050282809358488) +
          t24 * 0.0002084187189579907) +
         ((((((t123 * -0.24916 - t124 * 0.01306) - t161 * 0.2785) -
             t11 * t19 / 16.0) +
            t16 * t19 / 25.0) +
           t71_tmp * 0.00049316103378034732) +
          t72_tmp * 0.0010164081892845671)) +
        ((((t97_tmp * 0.0020553669367581831 - t130_tmp * 0.039212498159469283) -
           t11 * t199 / 25.0) -
          t16 * t199 / 16.0) +
         t15 * t20 * 0.2785);
    t19 = t10 * t90;
    t21 = t15 * t91;
    t20 = t11 * t68;
    t26 = t11 * t70;
    t93_tmp = t16 * t68;
    t14 = t16 * t70;
    left_toe_jac_body[3] =
        (((t8 * 0.00044695575041295863 - t13 * 0.0021796961771899559) +
          ((t23 * 0.005764334763854388 - t24 * 0.002796853981665954) -
           t71_tmp * 0.0011820007746820549)) +
         ((((t72_tmp * -0.013639587199321641 - t90 * t118 * 0.24916) -
            t91 * t118 * 0.01306) -
           t20 * t101 / 4.5671926166590723E+48) +
          t26 * t101 / 2.9230032746618058E+48)) +
        (((t93_tmp * t101 * -3.42113882891801E-49 -
           t14 * t101 / 4.5671926166590723E+48) -
          t19 * t118 * 0.2785) -
         t21 * t118 * 0.2785);
    t9 = t11 * t73;
    t18 = t16 * t73;
    left_toe_jac_body[4] =
        ((((((t23 * 0.00284 + t24 * 0.0058532589962366228) + t71_tmp * 0.01385) -
            t72_tmp * 0.001200235057712058) +
           t90 * t92 * 0.24916) +
          t91 * t92 * 0.01306) +
         t9 * t93 / 2.5961484292674138E+33) +
        ((((t9 * t94 / 4.0564819207303341E+33 -
            t18 * t93 / 4.0564819207303341E+33) +
           t18 * t94 / 2.5961484292674138E+33) +
          t19 * t92 * 0.2785) +
         t21 * t92 * 0.2785);
    left_toe_jac_body[5] =
        (((t8 * -0.0025348109127530049 + t13 * 0.01236166589493983) +
          ((t23 * 0.0010164081892845671 - t24 * 0.00049316103378034732) -
           t71_tmp * 0.0002084187189579907)) +
         ((((t72_tmp * -0.0024050282809358488 + t90 * t120 * 0.24916) +
            t91 * t120 * 0.01306) +
           t20 * t103 / 7.3075081866545146E+49) -
          t26 * t103 / 4.6768052394588888E+49)) +
        (((t93_tmp * t103 / 4.6768052394588888E+49 +
           t14 * t103 / 7.3075081866545146E+49) +
          t19 * t120 * 0.2785) +
         t21 * t120 * 0.2785);
    left_toe_jac_body[6] =
        ((((((((t125 * -0.24916 - t126 * 0.01306) + t146 * 0.01306) -
              t147 * 0.24916) -
             t183) -
            t186) -
           t77) -
          t72) +
         t209) +
        t211;
    left_toe_jac_body[7] =
        ((((((((t106 * -0.01306 + t107 * 0.24916) + t144) - t143) + t192) -
            t193) +
           t195) +
          t196) -
         t97_tmp * 0.22581568117665551) -
        t130_tmp * 0.011836381426260719;
    left_toe_jac_body[8] =
        ((((((((t127 * -0.24916 - t128 * 0.01306) + t148 * 0.01306) -
              t150 * 0.24916) -
             t187) -
            t190) -
           t119) -
          t71) +
         t171) +
        t74;
    left_toe_jac_body[9] = ((((-t183 - t186) - t77) - t72) + t209) + t211;
    left_toe_jac_body[10] = ((((t144 - t143) + t192) - t193) + t195) + t196;
    left_toe_jac_body[11] = ((((-t187 - t190) - t119) - t71) + t171) + t74;
    left_toe_jac_body[12] = ((-t77 - t72) + t209) + t211;
    left_toe_jac_body[13] = ((t192 - t193) + t195) + t196;
    left_toe_jac_body[14] = ((-t119 - t71) + t171) + t74;
    left_toe_jac << left_toe_jac_body[0], left_toe_jac_body[3], left_toe_jac_body[6], left_toe_jac_body[9], left_toe_jac_body[12],
        left_toe_jac_body[1], left_toe_jac_body[4], left_toe_jac_body[7], left_toe_jac_body[10], left_toe_jac_body[13],
        left_toe_jac_body[2], left_toe_jac_body[5], left_toe_jac_body[8], left_toe_jac_body[11], left_toe_jac_body[14];
    return left_toe_jac;
}

Eigen::Matrix<double, 3, LEG_DOF> Kinematics::cal_left_heel_jac(const Eigen::Matrix<double, LEG_DOF, 1> joint_pos) {
    Eigen::Matrix<double, 3, LEG_DOF> left_heel_jac;
    double left_heel_jac_body[15];
    double t10;
    double t101;
    double t103;
    double t104;
    double t105;
    double t106;
    double t107;
    double t11;
    double t118;
    double t119;
    double t12;
    double t120;
    double t121;
    double t122;
    double t123;
    double t124;
    double t125;
    double t126;
    double t127;
    double t128;
    double t129_tmp;
    double t13;
    double t130_tmp;
    double t131_tmp;
    double t134;
    double t137;
    double t14;
    double t143;
    double t144;
    double t146;
    double t147;
    double t148;
    double t15;
    double t150;
    double t152;
    double t154;
    double t159;
    double t16;
    double t161;
    double t171;
    double t18;
    double t180;
    double t183;
    double t186;
    double t187;
    double t19;
    double t190;
    double t192;
    double t194;
    double t195;
    double t198;
    double t20;
    double t201;
    double t21;
    double t211;
    double t215;
    double t23;
    double t24;
    double t26;
    double t68;
    double t7;
    double t70;
    double t71;
    double t71_tmp;
    double t72;
    double t72_tmp;
    double t73;
    double t74;
    double t77;
    double t8;
    double t9;
    double t90;
    double t91;
    double t92;
    double t93;
    double t93_tmp;
    double t94;
    double t97_tmp;
    // CAL_LEFT_HEEL_JAC_BODY
    //     LEFT_HEEL_JAC_BODY = CAL_LEFT_HEEL_JAC_BODY(IN1)
    //     This function was generated by the Symbolic Math Toolbox version 9.2.
    //     26-Dec-2023 16:46:12
    t7 = std::cos(joint_pos[0]);
    t8 = std::cos(joint_pos[1]);
    t9 = std::cos(joint_pos[2]);
    t10 = std::cos(joint_pos[3]);
    t11 = std::cos(joint_pos[4]);
    t12 = std::sin(joint_pos[0]);
    t13 = std::sin(joint_pos[1]);
    t14 = std::sin(joint_pos[2]);
    t15 = std::sin(joint_pos[3]);
    t16 = std::sin(joint_pos[4]);
    t18 = joint_pos[2] + joint_pos[3];
    t19 = std::cos(joint_pos[0] + joint_pos[1]);
    t20 = std::cos(t18);
    t21 = std::sin(t18);
    t23 = t7 * t13;
    t24 = t12 * t13;
    t74 = t7 * 0.89253905378626919;
    t77 = t7 * 0.1573787853566756;
    t26 = std::cos(joint_pos[0] - joint_pos[1]);
    t71_tmp = t7 * t8;
    t71 = t24 + t71_tmp * 0.42261797806762619;
    t90 = t14 * 0.25881867051728752 + t9 * 0.96592592665880117;
    t68 = t21 * 1.165615668098183E+15 + t20 * 4.350143643368078E+15;
    t72_tmp = t8 * t12;
    t72 = t23 - t72_tmp * 0.42261797806762619;
    t91 = t9 * 0.25881867051728752 - t14 * 0.96592592665880117;
    t119 = t9 * t15;
    t93_tmp = t10 * t14;
    t9 *= t10;
    t18 = t14 * t15;
    t93 = ((t18 * 1.165615668098183E+15 + t119 * 4.350143643368078E+15) +
           t93_tmp * 4.350143643368078E+15) -
          t9 * 1.165615668098183E+15;
    t94 = ((t119 * 1.165615668098183E+15 + t93_tmp * 1.165615668098183E+15) +
           t9 * 4.350143643368078E+15) -
          t18 * 4.350143643368078E+15;
    t18 = t23 * 0.98480774002322313 - t72_tmp * 0.416197455873963;
    t97_tmp = t12 * t90;
    t9 = t23 * 0.1736482513311082 - t72_tmp * 0.073386872872531927;
    t103 = (t13 * 5.792909656367617E+32 + t23 * 4.7630803684217777E+31) -
           t72_tmp * 1.127041587345724E+32;
    t104 = t71 * t90;
    t14 = (t24 * 0.98480774002322313 + t71_tmp * 0.416197455873963) -
          t8 * 0.1573787853566756;
    t119 = (t24 * 0.1736482513311082 + t8 * 0.89253905378626919) +
           t71_tmp * 0.073386872872531927;
    t120 = (-(t72_tmp * 0.1736482513311082) + t13 * 0.89253905378626919) +
           t23 * 0.073386872872531927;
    t125 = t90 * (t74 + 0.073386872872531927);
    t127 = t90 * (t77 - 0.416197455873963);
    t70 = t20 * 1.165615668098183E+15 - t21 * 4.350143643368078E+15;
    t73 = t19 * 1.040118983530025E+16 + t26 * 2.562760718366372E+16;
    t92 = t19 * 0.28869101096618688 + t26 * 0.71130898903381312;
    t101 = (t13 * 6.3840419750585418E+30 + t72_tmp * 3.9948547927995041E+31) -
           t23 * 1.6882974552066919E+31;
    t105 = t71 * t91;
    t106 = t72 * t90;
    t107 = t72 * t91;
    t118 = (t72_tmp * 0.98480774002322313 + t13 * 0.1573787853566756) -
           t23 * 0.416197455873963;
    t121 = t90 * t18;
    t122 = t91 * t18;
    t123 = t90 * t9;
    t124 = t91 * t9;
    t126 = t91 * (t74 + 0.073386872872531927);
    t128 = t91 * (t77 - 0.416197455873963);
    t146 = t90 * t14;
    t147 = t91 * t14;
    t148 = t90 * t119;
    t150 = t91 * t119;
    t129_tmp = t7 * t90;
    t18 = t129_tmp * 0.90630791931552235 + t105;
    t130_tmp = t12 * t91;
    t14 = t130_tmp * 0.90630791931552235 + t106;
    t131_tmp = t7 * t91;
    t9 = t131_tmp * 0.90630791931552235 - t104;
    t93_tmp = t97_tmp * 0.90630791931552235 - t107;
    t21 = t10 * t93_tmp;
    t144 = t21 * -0.2785;
    t152 = t130_tmp * 0.89253905378626919 + t121;
    t159 = t130_tmp * 0.1573787853566756 + t123;
    t119 = t125 + t147;
    t77 = t127 + t150;
    t134 = t15 * t18;
    t20 = t15 * t14;
    t137 = t10 * t9;
    t154 = t10 * t152;
    t161 = t10 * t159;
    t74 = t126 - t146;
    t26 = t10 * t119;
    t171 = t128 - t148;
    t71 = t10 * t77;
    t143 = t20 * 0.2785;
    t19 = t15 * t74;
    t72 = t15 * t171;
    t180 = t10 * t18 + t15 * t9;
    t9 = t10 * t14 + -t15 * t93_tmp;
    t183 = t26 * 0.2785;
    t187 = t71 * 0.2785;
    t18 = t20 + t21;
    t194 = t11 * t18 * -0.04;
    t198 = t16 * t18 * 0.0225;
    t93_tmp = t97_tmp * 0.89253905378626919 - t122;
    t21 = t154 + -t15 * t93_tmp;
    t20 = t97_tmp * 0.1573787853566756 - t124;
    t201 = t161 + -t15 * t20;
    t186 = t19 * 0.2785;
    t190 = t72 * 0.2785;
    t192 = t16 * t9 / 25.0;
    t195 = t11 * t9 * 0.0225;
    t9 = t26 + t19;
    t14 = t71 + t72;
    t18 = t15 * t119 - t10 * t74;
    t211 = t16 * t18 / 25.0;
    t215 = t11 * t18 * 0.0225;
    t18 = t15 * t77 - t10 * t171;
    t171 = t16 * t18 / 25.0;
    t74 = t11 * t18 * 0.0225;
    t77 = t11 * t9 / 25.0;
    t72 = t16 * t9 * 0.0225;
    t119 = t11 * t14 / 25.0;
    t71 = t16 * t14 * 0.0225;
    t19 = t15 * t152 + t10 * t93_tmp;
    left_heel_jac_body[0] =
        ((((t12 * -0.0155012981125982 - t23 * 0.013639587199321641) +
           t24 * 0.0011820007746820549) -
          t121 * 0.24916) +
         (((((t122 * -0.01306 - t154 * 0.2785) + t11 * t19 * 0.0225) +
            t16 * t19 / 25.0) +
           t71_tmp * 0.002796853981665954) +
          t72_tmp * 0.005764334763854388)) +
        ((((t97_tmp * 0.01165656004244868 - t130_tmp * 0.22238503064138679) -
           t11 * t21 / 25.0) +
          t16 * t21 * 0.0225) +
         t15 * t93_tmp * 0.2785);
    t19 = t134 - t137;
    left_heel_jac_body[1] =
        (((((((t7 * 0.015740430829912711 - t23 * 0.001200235057712058) -
              t24 * 0.01385) -
             t104 * 0.24916) -
            t105 * 0.01306) -
           t134 * 0.2785) +
          t137 * 0.2785) -
         t71_tmp * 0.0058532589962366228) +
        ((((((t72_tmp * 0.00284 - t129_tmp * 0.011836381426260719) +
             t131_tmp * 0.22581568117665551) -
            t11 * t180 * 0.0225) -
           t16 * t180 / 25.0) -
          t11 * t19 / 25.0) +
         t16 * t19 * 0.0225);
    t19 = t15 * t159 + t10 * t20;
    left_heel_jac_body[2] =
        (((t12 * -0.0027332982888126061 - t23 * 0.0024050282809358488) +
          t24 * 0.0002084187189579907) +
         ((((((t123 * -0.24916 - t124 * 0.01306) - t161 * 0.2785) +
             t11 * t19 * 0.0225) +
            t16 * t19 / 25.0) +
           t71_tmp * 0.00049316103378034732) +
          t72_tmp * 0.0010164081892845671)) +
        ((((t97_tmp * 0.0020553669367581831 - t130_tmp * 0.039212498159469283) -
           t11 * t201 / 25.0) +
          t16 * t201 * 0.0225) +
         t15 * t20 * 0.2785);
    t19 = t10 * t90;
    t21 = t15 * t91;
    t20 = t11 * t68;
    t26 = t11 * t70;
    t93_tmp = t16 * t68;
    t14 = t16 * t70;
    left_heel_jac_body[3] =
        (((t8 * 0.00044695575041295863 - t13 * 0.0021796961771899559) +
          ((t23 * 0.005764334763854388 - t24 * 0.002796853981665954) -
           t71_tmp * 0.0011820007746820549)) +
         ((((t72_tmp * -0.013639587199321641 - t90 * t118 * 0.24916) -
            t91 * t118 * 0.01306) -
           t20 * t101 / 4.5671926166590723E+48) -
          t26 * t101 * 1.2316099784104841E-49)) +
        (((t93_tmp * t101 * 1.2316099784104841E-49 -
           t14 * t101 / 4.5671926166590723E+48) -
          t19 * t118 * 0.2785) -
         t21 * t118 * 0.2785);
    t9 = t11 * t73;
    t18 = t16 * t73;
    left_heel_jac_body[4] =
        ((((((t23 * 0.00284 + t24 * 0.0058532589962366228) + t71_tmp * 0.01385) -
            t72_tmp * 0.001200235057712058) +
           t90 * t92 * 0.24916) +
          t91 * t92 * 0.01306) -
         t9 * t93 * 1.38666955995881E-34) +
        ((((t9 * t94 / 4.0564819207303341E+33 -
            t18 * t93 / 4.0564819207303341E+33) -
           t18 * t94 * 1.38666955995881E-34) +
          t19 * t92 * 0.2785) +
         t21 * t92 * 0.2785);
    left_heel_jac_body[5] =
        (((t8 * -0.0025348109127530049 + t13 * 0.01236166589493983) +
          ((t23 * 0.0010164081892845671 - t24 * 0.00049316103378034732) -
           t71_tmp * 0.0002084187189579907)) +
         ((((t72_tmp * -0.0024050282809358488 + t90 * t120 * 0.24916) +
            t91 * t120 * 0.01306) +
           t20 * t103 / 7.3075081866545146E+49) +
          t26 * t103 * 7.6975623650655232E-51)) +
        (((t93_tmp * t103 * -7.6975623650655232E-51 +
           t14 * t103 / 7.3075081866545146E+49) +
          t19 * t120 * 0.2785) +
         t21 * t120 * 0.2785);
    left_heel_jac_body[6] =
        ((((((((t125 * -0.24916 - t126 * 0.01306) + t146 * 0.01306) -
              t147 * 0.24916) -
             t183) -
            t186) -
           t77) +
          t72) +
         t211) +
        t215;
    left_heel_jac_body[7] =
        ((((((((t106 * -0.01306 + t107 * 0.24916) + t144) - t143) - t192) +
            t194) -
           t195) +
          t198) -
         t97_tmp * 0.22581568117665551) -
        t130_tmp * 0.011836381426260719;
    left_heel_jac_body[8] =
        ((((((((t127 * -0.24916 - t128 * 0.01306) + t148 * 0.01306) -
              t150 * 0.24916) -
             t187) -
            t190) -
           t119) +
          t71) +
         t171) +
        t74;
    left_heel_jac_body[9] = ((((-t183 - t186) - t77) + t72) + t211) + t215;
    left_heel_jac_body[10] = ((((t144 - t143) - t192) + t194) - t195) + t198;
    left_heel_jac_body[11] = ((((-t187 - t190) - t119) + t71) + t171) + t74;
    left_heel_jac_body[12] = ((-t77 + t72) + t211) + t215;
    left_heel_jac_body[13] = ((-t192 + t194) - t195) + t198;
    left_heel_jac_body[14] = ((-t119 + t71) + t171) + t74;
    left_heel_jac << left_heel_jac_body[0], left_heel_jac_body[3], left_heel_jac_body[6], left_heel_jac_body[9], left_heel_jac_body[12],
        left_heel_jac_body[1], left_heel_jac_body[4], left_heel_jac_body[7], left_heel_jac_body[10], left_heel_jac_body[13],
        left_heel_jac_body[2], left_heel_jac_body[5], left_heel_jac_body[8], left_heel_jac_body[11], left_heel_jac_body[14];
    return left_heel_jac;
}

Eigen::Matrix<double, 3, LEG_DOF> Kinematics::cal_right_toe_jac(const Eigen::Matrix<double, LEG_DOF, 1> joint_pos) {
    Eigen::Matrix<double, 3, LEG_DOF> right_toe_jac;
    double right_toe_jac_body[15];
    double t10;
    double t101;
    double t103;
    double t104;
    double t105;
    double t106;
    double t107;
    double t11;
    double t118;
    double t119;
    double t12;
    double t120;
    double t121;
    double t122;
    double t123;
    double t124;
    double t125;
    double t126;
    double t127;
    double t128;
    double t129_tmp;
    double t13;
    double t130_tmp;
    double t131_tmp;
    double t134;
    double t137;
    double t14;
    double t143;
    double t144;
    double t146;
    double t147;
    double t148;
    double t15;
    double t150;
    double t152;
    double t154;
    double t159;
    double t16;
    double t161;
    double t171;
    double t18;
    double t180;
    double t183;
    double t186;
    double t187;
    double t19;
    double t190;
    double t192;
    double t193;
    double t195;
    double t196;
    double t199;
    double t20;
    double t209;
    double t21;
    double t211;
    double t23;
    double t24;
    double t26;
    double t68;
    double t7;
    double t70;
    double t71;
    double t71_tmp;
    double t72;
    double t72_tmp;
    double t73;
    double t74;
    double t77;
    double t8;
    double t9;
    double t90;
    double t91;
    double t92;
    double t93;
    double t93_tmp;
    double t94;
    double t97_tmp;
    // CAL_RIGHT_TOE_JAC_BODY
    //     RIGHT_TOE_JAC_BODY = CAL_RIGHT_TOE_JAC_BODY(IN1)
    //     This function was generated by the Symbolic Math Toolbox version 9.2.
    //     26-Dec-2023 16:46:13
    t7 = std::cos(joint_pos[0]);
    t8 = std::cos(joint_pos[1]);
    t9 = std::cos(joint_pos[2]);
    t10 = std::cos(joint_pos[3]);
    t11 = std::cos(joint_pos[4]);
    t12 = std::sin(joint_pos[0]);
    t13 = std::sin(joint_pos[1]);
    t14 = std::sin(joint_pos[2]);
    t15 = std::sin(joint_pos[3]);
    t16 = std::sin(joint_pos[4]);
    t18 = joint_pos[2] + joint_pos[3];
    t19 = std::cos(joint_pos[0] + joint_pos[1]);
    t20 = std::cos(t18);
    t21 = std::sin(t18);
    t23 = t7 * t13;
    t24 = t12 * t13;
    t74 = t7 * 0.89253905378626919;
    t77 = t7 * 0.1573787853566756;
    t26 = std::cos(joint_pos[0] - joint_pos[1]);
    t71_tmp = t7 * t8;
    t71 = t24 + t71_tmp * 0.42261797806762619;
    t90 = t14 * 0.25881867051728752 + t9 * 0.96592592665880117;
    t68 = t21 * 1.165615668098183E+15 + t20 * 4.350143643368078E+15;
    t72_tmp = t8 * t12;
    t72 = t23 - t72_tmp * 0.42261797806762619;
    t91 = t9 * 0.25881867051728752 - t14 * 0.96592592665880117;
    t119 = t9 * t15;
    t93_tmp = t10 * t14;
    t9 *= t10;
    t18 = t14 * t15;
    t93 = ((t18 * 1.165615668098183E+15 + t119 * 4.350143643368078E+15) +
           t93_tmp * 4.350143643368078E+15) -
          t9 * 1.165615668098183E+15;
    t94 = ((t119 * 1.165615668098183E+15 + t93_tmp * 1.165615668098183E+15) +
           t9 * 4.350143643368078E+15) -
          t18 * 4.350143643368078E+15;
    t18 = t23 * 0.98480774002322313 - t72_tmp * 0.416197455873963;
    t97_tmp = t12 * t90;
    t9 = t23 * 0.1736482513311082 - t72_tmp * 0.073386872872531927;
    t103 = (t13 * 5.792909656367617E+32 + t23 * 4.7630803684217777E+31) -
           t72_tmp * 1.127041587345724E+32;
    t104 = t71 * t90;
    t14 = (t24 * 0.98480774002322313 + t71_tmp * 0.416197455873963) -
          t8 * 0.1573787853566756;
    t119 = (t24 * 0.1736482513311082 + t8 * 0.89253905378626919) +
           t71_tmp * 0.073386872872531927;
    t120 = (-(t72_tmp * 0.1736482513311082) + t13 * 0.89253905378626919) +
           t23 * 0.073386872872531927;
    t125 = t90 * (t74 + 0.073386872872531927);
    t127 = t90 * (t77 - 0.416197455873963);
    t70 = t20 * 1.165615668098183E+15 - t21 * 4.350143643368078E+15;
    t73 = t19 * 1.040118983530025E+16 + t26 * 2.562760718366372E+16;
    t92 = t19 * 0.28869101096618688 + t26 * 0.71130898903381312;
    t101 = (t13 * 6.3840419750585418E+30 + t72_tmp * 3.9948547927995041E+31) -
           t23 * 1.6882974552066919E+31;
    t105 = t71 * t91;
    t106 = t72 * t90;
    t107 = t72 * t91;
    t118 = (t72_tmp * 0.98480774002322313 + t13 * 0.1573787853566756) -
           t23 * 0.416197455873963;
    t121 = t90 * t18;
    t122 = t91 * t18;
    t123 = t90 * t9;
    t124 = t91 * t9;
    t126 = t91 * (t74 + 0.073386872872531927);
    t128 = t91 * (t77 - 0.416197455873963);
    t146 = t90 * t14;
    t147 = t91 * t14;
    t148 = t90 * t119;
    t150 = t91 * t119;
    t129_tmp = t7 * t90;
    t18 = t129_tmp * 0.90630791931552235 + t105;
    t130_tmp = t12 * t91;
    t14 = t130_tmp * 0.90630791931552235 + t106;
    t131_tmp = t7 * t91;
    t9 = t131_tmp * 0.90630791931552235 - t104;
    t93_tmp = t97_tmp * 0.90630791931552235 - t107;
    t21 = t10 * t93_tmp;
    t144 = t21 * -0.2785;
    t152 = t130_tmp * 0.89253905378626919 + t121;
    t159 = t130_tmp * 0.1573787853566756 + t123;
    t119 = t125 + t147;
    t77 = t127 + t150;
    t134 = t15 * t18;
    t20 = t15 * t14;
    t137 = t10 * t9;
    t154 = t10 * t152;
    t161 = t10 * t159;
    t74 = t126 - t146;
    t26 = t10 * t119;
    t171 = t128 - t148;
    t71 = t10 * t77;
    t143 = t20 * 0.2785;
    t19 = t15 * t74;
    t72 = t15 * t171;
    t180 = t10 * t18 + t15 * t9;
    t9 = t10 * t14 + -t15 * t93_tmp;
    t183 = t26 * 0.2785;
    t187 = t71 * 0.2785;
    t18 = t20 + t21;
    t195 = t11 * t18 * -0.04;
    t196 = t16 * t18 * -0.0625;
    t93_tmp = t97_tmp * 0.89253905378626919 - t122;
    t21 = t154 + -t15 * t93_tmp;
    t20 = t97_tmp * 0.1573787853566756 - t124;
    t199 = t161 + -t15 * t20;
    t186 = t19 * 0.2785;
    t190 = t72 * 0.2785;
    t192 = t11 * t9 / 16.0;
    t193 = t16 * t9 / 25.0;
    t9 = t26 + t19;
    t14 = t71 + t72;
    t18 = t15 * t119 - t10 * t74;
    t209 = t11 * t18 * -0.0625;
    t211 = t16 * t18 / 25.0;
    t18 = t15 * t77 - t10 * t171;
    t171 = t11 * t18 * -0.0625;
    t74 = t16 * t18 / 25.0;
    t77 = t11 * t9 / 25.0;
    t72 = t16 * t9 / 16.0;
    t119 = t11 * t14 / 25.0;
    t71 = t16 * t14 / 16.0;
    t19 = t15 * t152 + t10 * t93_tmp;
    right_toe_jac_body[0] =
        ((((t12 * -0.0155012981125982 - t23 * 0.013639587199321641) -
           t24 * 0.0011820007746820549) -
          t121 * 0.24916) +
         (((((t122 * -0.01306 - t154 * 0.2785) - t11 * t19 / 16.0) +
            t16 * t19 / 25.0) -
           t71_tmp * 0.002796853981665954) +
          t72_tmp * 0.005764334763854388)) +
        ((((t97_tmp * 0.01165656004244868 - t130_tmp * 0.22238503064138679) -
           t11 * t21 / 25.0) -
          t16 * t21 / 16.0) +
         t15 * t93_tmp * 0.2785);
    t19 = t134 - t137;
    right_toe_jac_body[1] =
        (((((((t7 * 0.015740430829912711 + t23 * 0.001200235057712058) -
              t24 * 0.01385) -
             t104 * 0.24916) -
            t105 * 0.01306) -
           t134 * 0.2785) +
          t137 * 0.2785) -
         t71_tmp * 0.0058532589962366228) +
        ((((((t72_tmp * -0.00284 - t129_tmp * 0.011836381426260719) +
             t131_tmp * 0.22581568117665551) +
            t11 * t180 / 16.0) -
           t16 * t180 / 25.0) -
          t11 * t19 / 25.0) -
         t16 * t19 / 16.0);
    t19 = t15 * t159 + t10 * t20;
    right_toe_jac_body[2] =
        (((t12 * -0.0027332982888126061 - t23 * 0.0024050282809358488) -
          t24 * 0.0002084187189579907) +
         ((((((t123 * -0.24916 - t124 * 0.01306) - t161 * 0.2785) -
             t11 * t19 / 16.0) +
            t16 * t19 / 25.0) -
           t71_tmp * 0.00049316103378034732) +
          t72_tmp * 0.0010164081892845671)) +
        ((((t97_tmp * 0.0020553669367581831 - t130_tmp * 0.039212498159469283) -
           t11 * t199 / 25.0) -
          t16 * t199 / 16.0) +
         t15 * t20 * 0.2785);
    t19 = t10 * t90;
    t21 = t15 * t91;
    t20 = t11 * t68;
    t26 = t11 * t70;
    t93_tmp = t16 * t68;
    t14 = t16 * t70;
    right_toe_jac_body[3] =
        (((t8 * -0.00044695575041295863 - t13 * 0.0021796961771899559) +
          ((t23 * 0.005764334763854388 + t24 * 0.002796853981665954) +
           t71_tmp * 0.0011820007746820549)) +
         ((((t72_tmp * -0.013639587199321641 - t90 * t118 * 0.24916) -
            t91 * t118 * 0.01306) -
           t20 * t101 / 4.5671926166590723E+48) +
          t26 * t101 / 2.9230032746618058E+48)) +
        (((t93_tmp * t101 * -3.42113882891801E-49 -
           t14 * t101 / 4.5671926166590723E+48) -
          t19 * t118 * 0.2785) -
         t21 * t118 * 0.2785);
    t9 = t11 * t73;
    t18 = t16 * t73;
    right_toe_jac_body[4] =
        ((((((t23 * -0.00284 + t24 * 0.0058532589962366228) + t71_tmp * 0.01385) +
            t72_tmp * 0.001200235057712058) +
           t90 * t92 * 0.24916) +
          t91 * t92 * 0.01306) +
         t9 * t93 / 2.5961484292674138E+33) +
        ((((t9 * t94 / 4.0564819207303341E+33 -
            t18 * t93 / 4.0564819207303341E+33) +
           t18 * t94 / 2.5961484292674138E+33) +
          t19 * t92 * 0.2785) +
         t21 * t92 * 0.2785);
    right_toe_jac_body[5] =
        (((t8 * 0.0025348109127530049 + t13 * 0.01236166589493983) +
          ((t23 * 0.0010164081892845671 + t24 * 0.00049316103378034732) +
           t71_tmp * 0.0002084187189579907)) +
         ((((t72_tmp * -0.0024050282809358488 + t90 * t120 * 0.24916) +
            t91 * t120 * 0.01306) +
           t20 * t103 / 7.3075081866545146E+49) -
          t26 * t103 / 4.6768052394588888E+49)) +
        (((t93_tmp * t103 / 4.6768052394588888E+49 +
           t14 * t103 / 7.3075081866545146E+49) +
          t19 * t120 * 0.2785) +
         t21 * t120 * 0.2785);
    right_toe_jac_body[6] =
        ((((((((t125 * -0.24916 - t126 * 0.01306) + t146 * 0.01306) -
              t147 * 0.24916) -
             t183) -
            t186) -
           t77) -
          t72) +
         t209) +
        t211;
    right_toe_jac_body[7] =
        ((((((((t106 * -0.01306 + t107 * 0.24916) + t144) - t143) + t192) -
            t193) +
           t195) +
          t196) -
         t97_tmp * 0.22581568117665551) -
        t130_tmp * 0.011836381426260719;
    right_toe_jac_body[8] =
        ((((((((t127 * -0.24916 - t128 * 0.01306) + t148 * 0.01306) -
              t150 * 0.24916) -
             t187) -
            t190) -
           t119) -
          t71) +
         t171) +
        t74;
    right_toe_jac_body[9] = ((((-t183 - t186) - t77) - t72) + t209) + t211;
    right_toe_jac_body[10] = ((((t144 - t143) + t192) - t193) + t195) + t196;
    right_toe_jac_body[11] = ((((-t187 - t190) - t119) - t71) + t171) + t74;
    right_toe_jac_body[12] = ((-t77 - t72) + t209) + t211;
    right_toe_jac_body[13] = ((t192 - t193) + t195) + t196;
    right_toe_jac_body[14] = ((-t119 - t71) + t171) + t74;
    right_toe_jac << right_toe_jac_body[0], right_toe_jac_body[3], right_toe_jac_body[6], right_toe_jac_body[9], right_toe_jac_body[12],
        right_toe_jac_body[1], right_toe_jac_body[4], right_toe_jac_body[7], right_toe_jac_body[10], right_toe_jac_body[13],
        right_toe_jac_body[2], right_toe_jac_body[5], right_toe_jac_body[8], right_toe_jac_body[11], right_toe_jac_body[14];
    return right_toe_jac;
}

Eigen::Matrix<double, 3, LEG_DOF> Kinematics::cal_right_heel_jac(const Eigen::Matrix<double, LEG_DOF, 1> joint_pos) {
    Eigen::Matrix<double, 3, LEG_DOF> right_heel_jac;
    double right_heel_jac_body[15];
    double t10;
    double t101;
    double t103;
    double t104;
    double t105;
    double t106;
    double t107;
    double t11;
    double t118;
    double t119;
    double t12;
    double t120;
    double t121;
    double t122;
    double t123;
    double t124;
    double t125;
    double t126;
    double t127;
    double t128;
    double t129_tmp;
    double t13;
    double t130_tmp;
    double t131_tmp;
    double t134;
    double t137;
    double t14;
    double t143;
    double t144;
    double t146;
    double t147;
    double t148;
    double t15;
    double t150;
    double t152;
    double t154;
    double t159;
    double t16;
    double t161;
    double t171;
    double t18;
    double t180;
    double t183;
    double t186;
    double t187;
    double t19;
    double t190;
    double t192;
    double t194;
    double t195;
    double t198;
    double t20;
    double t201;
    double t21;
    double t211;
    double t215;
    double t23;
    double t24;
    double t26;
    double t68;
    double t7;
    double t70;
    double t71;
    double t71_tmp;
    double t72;
    double t72_tmp;
    double t73;
    double t74;
    double t77;
    double t8;
    double t9;
    double t90;
    double t91;
    double t92;
    double t93;
    double t93_tmp;
    double t94;
    double t97_tmp;
    // CAL_RIGHT_HEEL_JAC_BODY
    //     RIGHT_HEEL_JAC_BODY = CAL_RIGHT_HEEL_JAC_BODY(IN1)
    //     This function was generated by the Symbolic Math Toolbox version 9.2.
    //     26-Dec-2023 16:46:15
    t7 = std::cos(joint_pos[0]);
    t8 = std::cos(joint_pos[1]);
    t9 = std::cos(joint_pos[2]);
    t10 = std::cos(joint_pos[3]);
    t11 = std::cos(joint_pos[4]);
    t12 = std::sin(joint_pos[0]);
    t13 = std::sin(joint_pos[1]);
    t14 = std::sin(joint_pos[2]);
    t15 = std::sin(joint_pos[3]);
    t16 = std::sin(joint_pos[4]);
    t18 = joint_pos[2] + joint_pos[3];
    t19 = std::cos(joint_pos[0] + joint_pos[1]);
    t20 = std::cos(t18);
    t21 = std::sin(t18);
    t23 = t7 * t13;
    t24 = t12 * t13;
    t74 = t7 * 0.89253905378626919;
    t77 = t7 * 0.1573787853566756;
    t26 = std::cos(joint_pos[0] - joint_pos[1]);
    t71_tmp = t7 * t8;
    t71 = t24 + t71_tmp * 0.42261797806762619;
    t90 = t14 * 0.25881867051728752 + t9 * 0.96592592665880117;
    t68 = t21 * 1.165615668098183E+15 + t20 * 4.350143643368078E+15;
    t72_tmp = t8 * t12;
    t72 = t23 - t72_tmp * 0.42261797806762619;
    t91 = t9 * 0.25881867051728752 - t14 * 0.96592592665880117;
    t119 = t9 * t15;
    t93_tmp = t10 * t14;
    t9 *= t10;
    t18 = t14 * t15;
    t93 = ((t18 * 1.165615668098183E+15 + t119 * 4.350143643368078E+15) +
           t93_tmp * 4.350143643368078E+15) -
          t9 * 1.165615668098183E+15;
    t94 = ((t119 * 1.165615668098183E+15 + t93_tmp * 1.165615668098183E+15) +
           t9 * 4.350143643368078E+15) -
          t18 * 4.350143643368078E+15;
    t18 = t23 * 0.98480774002322313 - t72_tmp * 0.416197455873963;
    t97_tmp = t12 * t90;
    t9 = t23 * 0.1736482513311082 - t72_tmp * 0.073386872872531927;
    t103 = (t13 * 5.792909656367617E+32 + t23 * 4.7630803684217777E+31) -
           t72_tmp * 1.127041587345724E+32;
    t104 = t71 * t90;
    t14 = (t24 * 0.98480774002322313 + t71_tmp * 0.416197455873963) -
          t8 * 0.1573787853566756;
    t119 = (t24 * 0.1736482513311082 + t8 * 0.89253905378626919) +
           t71_tmp * 0.073386872872531927;
    t120 = (-(t72_tmp * 0.1736482513311082) + t13 * 0.89253905378626919) +
           t23 * 0.073386872872531927;
    t125 = t90 * (t74 + 0.073386872872531927);
    t127 = t90 * (t77 - 0.416197455873963);
    t70 = t20 * 1.165615668098183E+15 - t21 * 4.350143643368078E+15;
    t73 = t19 * 1.040118983530025E+16 + t26 * 2.562760718366372E+16;
    t92 = t19 * 0.28869101096618688 + t26 * 0.71130898903381312;
    t101 = (t13 * 6.3840419750585418E+30 + t72_tmp * 3.9948547927995041E+31) -
           t23 * 1.6882974552066919E+31;
    t105 = t71 * t91;
    t106 = t72 * t90;
    t107 = t72 * t91;
    t118 = (t72_tmp * 0.98480774002322313 + t13 * 0.1573787853566756) -
           t23 * 0.416197455873963;
    t121 = t90 * t18;
    t122 = t91 * t18;
    t123 = t90 * t9;
    t124 = t91 * t9;
    t126 = t91 * (t74 + 0.073386872872531927);
    t128 = t91 * (t77 - 0.416197455873963);
    t146 = t90 * t14;
    t147 = t91 * t14;
    t148 = t90 * t119;
    t150 = t91 * t119;
    t129_tmp = t7 * t90;
    t18 = t129_tmp * 0.90630791931552235 + t105;
    t130_tmp = t12 * t91;
    t14 = t130_tmp * 0.90630791931552235 + t106;
    t131_tmp = t7 * t91;
    t9 = t131_tmp * 0.90630791931552235 - t104;
    t93_tmp = t97_tmp * 0.90630791931552235 - t107;
    t21 = t10 * t93_tmp;
    t144 = t21 * -0.2785;
    t152 = t130_tmp * 0.89253905378626919 + t121;
    t159 = t130_tmp * 0.1573787853566756 + t123;
    t119 = t125 + t147;
    t77 = t127 + t150;
    t134 = t15 * t18;
    t20 = t15 * t14;
    t137 = t10 * t9;
    t154 = t10 * t152;
    t161 = t10 * t159;
    t74 = t126 - t146;
    t26 = t10 * t119;
    t171 = t128 - t148;
    t71 = t10 * t77;
    t143 = t20 * 0.2785;
    t19 = t15 * t74;
    t72 = t15 * t171;
    t180 = t10 * t18 + t15 * t9;
    t9 = t10 * t14 + -t15 * t93_tmp;
    t183 = t26 * 0.2785;
    t187 = t71 * 0.2785;
    t18 = t20 + t21;
    t194 = t11 * t18 * -0.04;
    t198 = t16 * t18 * 0.0225;
    t93_tmp = t97_tmp * 0.89253905378626919 - t122;
    t21 = t154 + -t15 * t93_tmp;
    t20 = t97_tmp * 0.1573787853566756 - t124;
    t201 = t161 + -t15 * t20;
    t186 = t19 * 0.2785;
    t190 = t72 * 0.2785;
    t192 = t16 * t9 / 25.0;
    t195 = t11 * t9 * 0.0225;
    t9 = t26 + t19;
    t14 = t71 + t72;
    t18 = t15 * t119 - t10 * t74;
    t211 = t16 * t18 / 25.0;
    t215 = t11 * t18 * 0.0225;
    t18 = t15 * t77 - t10 * t171;
    t171 = t16 * t18 / 25.0;
    t74 = t11 * t18 * 0.0225;
    t77 = t11 * t9 / 25.0;
    t72 = t16 * t9 * 0.0225;
    t119 = t11 * t14 / 25.0;
    t71 = t16 * t14 * 0.0225;
    t19 = t15 * t152 + t10 * t93_tmp;
    right_heel_jac_body[0] =
        ((((t12 * -0.0155012981125982 - t23 * 0.013639587199321641) -
           t24 * 0.0011820007746820549) -
          t121 * 0.24916) +
         (((((t122 * -0.01306 - t154 * 0.2785) + t11 * t19 * 0.0225) +
            t16 * t19 / 25.0) -
           t71_tmp * 0.002796853981665954) +
          t72_tmp * 0.005764334763854388)) +
        ((((t97_tmp * 0.01165656004244868 - t130_tmp * 0.22238503064138679) -
           t11 * t21 / 25.0) +
          t16 * t21 * 0.0225) +
         t15 * t93_tmp * 0.2785);
    t19 = t134 - t137;
    right_heel_jac_body[1] =
        (((((((t7 * 0.015740430829912711 + t23 * 0.001200235057712058) -
              t24 * 0.01385) -
             t104 * 0.24916) -
            t105 * 0.01306) -
           t134 * 0.2785) +
          t137 * 0.2785) -
         t71_tmp * 0.0058532589962366228) +
        ((((((t72_tmp * -0.00284 - t129_tmp * 0.011836381426260719) +
             t131_tmp * 0.22581568117665551) -
            t11 * t180 * 0.0225) -
           t16 * t180 / 25.0) -
          t11 * t19 / 25.0) +
         t16 * t19 * 0.0225);
    t19 = t15 * t159 + t10 * t20;
    right_heel_jac_body[2] =
        (((t12 * -0.0027332982888126061 - t23 * 0.0024050282809358488) -
          t24 * 0.0002084187189579907) +
         ((((((t123 * -0.24916 - t124 * 0.01306) - t161 * 0.2785) +
             t11 * t19 * 0.0225) +
            t16 * t19 / 25.0) -
           t71_tmp * 0.00049316103378034732) +
          t72_tmp * 0.0010164081892845671)) +
        ((((t97_tmp * 0.0020553669367581831 - t130_tmp * 0.039212498159469283) -
           t11 * t201 / 25.0) +
          t16 * t201 * 0.0225) +
         t15 * t20 * 0.2785);
    t19 = t10 * t90;
    t21 = t15 * t91;
    t20 = t11 * t68;
    t26 = t11 * t70;
    t93_tmp = t16 * t68;
    t14 = t16 * t70;
    right_heel_jac_body[3] =
        (((t8 * -0.00044695575041295863 - t13 * 0.0021796961771899559) +
          ((t23 * 0.005764334763854388 + t24 * 0.002796853981665954) +
           t71_tmp * 0.0011820007746820549)) +
         ((((t72_tmp * -0.013639587199321641 - t90 * t118 * 0.24916) -
            t91 * t118 * 0.01306) -
           t20 * t101 / 4.5671926166590723E+48) -
          t26 * t101 * 1.2316099784104841E-49)) +
        (((t93_tmp * t101 * 1.2316099784104841E-49 -
           t14 * t101 / 4.5671926166590723E+48) -
          t19 * t118 * 0.2785) -
         t21 * t118 * 0.2785);
    t9 = t11 * t73;
    t18 = t16 * t73;
    right_heel_jac_body[4] =
        ((((((t23 * -0.00284 + t24 * 0.0058532589962366228) + t71_tmp * 0.01385) +
            t72_tmp * 0.001200235057712058) +
           t90 * t92 * 0.24916) +
          t91 * t92 * 0.01306) -
         t9 * t93 * 1.38666955995881E-34) +
        ((((t9 * t94 / 4.0564819207303341E+33 -
            t18 * t93 / 4.0564819207303341E+33) -
           t18 * t94 * 1.38666955995881E-34) +
          t19 * t92 * 0.2785) +
         t21 * t92 * 0.2785);
    right_heel_jac_body[5] =
        (((t8 * 0.0025348109127530049 + t13 * 0.01236166589493983) +
          ((t23 * 0.0010164081892845671 + t24 * 0.00049316103378034732) +
           t71_tmp * 0.0002084187189579907)) +
         ((((t72_tmp * -0.0024050282809358488 + t90 * t120 * 0.24916) +
            t91 * t120 * 0.01306) +
           t20 * t103 / 7.3075081866545146E+49) +
          t26 * t103 * 7.6975623650655232E-51)) +
        (((t93_tmp * t103 * -7.6975623650655232E-51 +
           t14 * t103 / 7.3075081866545146E+49) +
          t19 * t120 * 0.2785) +
         t21 * t120 * 0.2785);
    right_heel_jac_body[6] =
        ((((((((t125 * -0.24916 - t126 * 0.01306) + t146 * 0.01306) -
              t147 * 0.24916) -
             t183) -
            t186) -
           t77) +
          t72) +
         t211) +
        t215;
    right_heel_jac_body[7] =
        ((((((((t106 * -0.01306 + t107 * 0.24916) + t144) - t143) - t192) +
            t194) -
           t195) +
          t198) -
         t97_tmp * 0.22581568117665551) -
        t130_tmp * 0.011836381426260719;
    right_heel_jac_body[8] =
        ((((((((t127 * -0.24916 - t128 * 0.01306) + t148 * 0.01306) -
              t150 * 0.24916) -
             t187) -
            t190) -
           t119) +
          t71) +
         t171) +
        t74;
    right_heel_jac_body[9] = ((((-t183 - t186) - t77) + t72) + t211) + t215;
    right_heel_jac_body[10] = ((((t144 - t143) - t192) + t194) - t195) + t198;
    right_heel_jac_body[11] = ((((-t187 - t190) - t119) + t71) + t171) + t74;
    right_heel_jac_body[12] = ((-t77 + t72) + t211) + t215;
    right_heel_jac_body[13] = ((-t192 + t194) - t195) + t198;
    right_heel_jac_body[14] = ((-t119 + t71) + t171) + t74;
    right_heel_jac << right_heel_jac_body[0], right_heel_jac_body[3], right_heel_jac_body[6], right_heel_jac_body[9], right_heel_jac_body[12],
        right_heel_jac_body[1], right_heel_jac_body[4], right_heel_jac_body[7], right_heel_jac_body[10], right_heel_jac_body[13],
        right_heel_jac_body[2], right_heel_jac_body[5], right_heel_jac_body[8], right_heel_jac_body[11], right_heel_jac_body[14];
    return right_heel_jac;
}

}  // namespace robot
